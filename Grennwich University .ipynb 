{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Cafesail/COM528-Assesment/blob/master/Grennwich%20University%20.ipynb%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "75df421f",
      "metadata": {
        "id": "75df421f"
      },
      "source": [
        "Python is a programming language for computers that is frequently used for developing websites and applications, and analyse data. Python it can be used to develop a wide range of programmes.\n",
        "Importing commands load the required modules (pandas, seaborn, and matplotlib. pyplot) for managing data, presentation, and plot creation, and give identities. Using the as keyword to assign acronyms to loaded modules  enables  to use these resources in your code with a more accessible name, which can assist prevent identity issues. It allows to decrease your time typing while improving your source code easier to understand. The instruction then specifies the graph method, allocates a colour map for use in representations, and specifies aliases."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c37b8d06",
      "metadata": {
        "id": "c37b8d06"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e8eb30d3",
      "metadata": {
        "id": "e8eb30d3"
      },
      "source": [
        "Implement CSV file and read the file to the Data Frame\n",
        "Knowing how data is distributed and learning about how often or percentage of different groups inside one column or characteristic. It enables understanding of the imbalance or balance between several categories and can serve as a starting point for further investigation ."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a22a13bd",
      "metadata": {
        "id": "a22a13bd"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bba748f4",
      "metadata": {
        "id": "bba748f4"
      },
      "outputs": [],
      "source": [
        "df = pd.read_csv(\"OPTION1_uk_road_accident_2019_coursework_final.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "17982887",
      "metadata": {
        "id": "17982887",
        "outputId": "02716eab-1e21-4d9e-b5f8-d82ffec4759f"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>accident_index</th>\n",
              "      <th>speed_limit</th>\n",
              "      <th>light_conditions</th>\n",
              "      <th>weather_conditions</th>\n",
              "      <th>road_surface_conditions</th>\n",
              "      <th>vehicle_type</th>\n",
              "      <th>junction_location</th>\n",
              "      <th>skidding_and_overturning</th>\n",
              "      <th>vehicle_leaving_carriageway</th>\n",
              "      <th>hit_object_off_carriageway</th>\n",
              "      <th>first_point_of_impact</th>\n",
              "      <th>sex_of_driver</th>\n",
              "      <th>age_of_oldest_driver</th>\n",
              "      <th>accident_severity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2019010225080</td>\n",
              "      <td>30</td>\n",
              "      <td>darkness</td>\n",
              "      <td>other</td>\n",
              "      <td>wet or damp</td>\n",
              "      <td>at least one van</td>\n",
              "      <td>at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>other points of impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>63.0</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2019200908684</td>\n",
              "      <td>30</td>\n",
              "      <td>darkness</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>only cars</td>\n",
              "      <td>at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>at least one vehicle leaving carriageway</td>\n",
              "      <td>at least one vehicle hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>82.0</td>\n",
              "      <td>fatal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2019040860897</td>\n",
              "      <td>40</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>only cars</td>\n",
              "      <td>at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>NaN</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2019460847205</td>\n",
              "      <td>40</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>only cars</td>\n",
              "      <td>not at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>male and female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2019051911581</td>\n",
              "      <td>30</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>only cars</td>\n",
              "      <td>not at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>all females</td>\n",
              "      <td>39.0</td>\n",
              "      <td>slight</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31642</th>\n",
              "      <td>2019070317173</td>\n",
              "      <td>30</td>\n",
              "      <td>darkness</td>\n",
              "      <td>fine</td>\n",
              "      <td>wet or damp</td>\n",
              "      <td>at least one biped</td>\n",
              "      <td>not at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>27.0</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31643</th>\n",
              "      <td>2019970892077</td>\n",
              "      <td>60</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>other</td>\n",
              "      <td>at or within 20 metres of junction</td>\n",
              "      <td>at least one vehicle skidded or overturned</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>other points of impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>27.0</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31644</th>\n",
              "      <td>20191369p0654</td>\n",
              "      <td>70</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>at least one van</td>\n",
              "      <td>not at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>67.0</td>\n",
              "      <td>slight</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31645</th>\n",
              "      <td>2019470903814</td>\n",
              "      <td>30</td>\n",
              "      <td>darkness</td>\n",
              "      <td>fine</td>\n",
              "      <td>wet or damp</td>\n",
              "      <td>only cars</td>\n",
              "      <td>not at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>other points of impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>24.0</td>\n",
              "      <td>fatal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31646</th>\n",
              "      <td>2019010214285</td>\n",
              "      <td>20</td>\n",
              "      <td>darkness</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>at least one biped</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>54.0</td>\n",
              "      <td>fatal</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>31647 rows × 14 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      accident_index  speed_limit light_conditions weather_conditions  \\\n",
              "0      2019010225080           30         darkness              other   \n",
              "1      2019200908684           30         darkness               fine   \n",
              "2      2019040860897           40         daylight               fine   \n",
              "3      2019460847205           40         daylight               fine   \n",
              "4      2019051911581           30         daylight               fine   \n",
              "...              ...          ...              ...                ...   \n",
              "31642  2019070317173           30         darkness               fine   \n",
              "31643  2019970892077           60         daylight               fine   \n",
              "31644  20191369p0654           70         daylight               fine   \n",
              "31645  2019470903814           30         darkness               fine   \n",
              "31646  2019010214285           20         darkness               fine   \n",
              "\n",
              "      road_surface_conditions        vehicle_type  \\\n",
              "0                 wet or damp    at least one van   \n",
              "1                         dry           only cars   \n",
              "2                         dry           only cars   \n",
              "3                         dry           only cars   \n",
              "4                         dry           only cars   \n",
              "...                       ...                 ...   \n",
              "31642             wet or damp  at least one biped   \n",
              "31643                     dry               other   \n",
              "31644                     dry    at least one van   \n",
              "31645             wet or damp           only cars   \n",
              "31646                     dry  at least one biped   \n",
              "\n",
              "                            junction_location  \\\n",
              "0          at or within 20 metres of junction   \n",
              "1          at or within 20 metres of junction   \n",
              "2          at or within 20 metres of junction   \n",
              "3      not at or within 20 metres of junction   \n",
              "4      not at or within 20 metres of junction   \n",
              "...                                       ...   \n",
              "31642  not at or within 20 metres of junction   \n",
              "31643      at or within 20 metres of junction   \n",
              "31644  not at or within 20 metres of junction   \n",
              "31645  not at or within 20 metres of junction   \n",
              "31646            data missing or out of range   \n",
              "\n",
              "                         skidding_and_overturning  \\\n",
              "0                      no skidding or overturning   \n",
              "1                      no skidding or overturning   \n",
              "2                      no skidding or overturning   \n",
              "3                      no skidding or overturning   \n",
              "4                      no skidding or overturning   \n",
              "...                                           ...   \n",
              "31642                  no skidding or overturning   \n",
              "31643  at least one vehicle skidded or overturned   \n",
              "31644                  no skidding or overturning   \n",
              "31645                  no skidding or overturning   \n",
              "31646                data missing or out of range   \n",
              "\n",
              "                    vehicle_leaving_carriageway  \\\n",
              "0                      none leaving carriageway   \n",
              "1      at least one vehicle leaving carriageway   \n",
              "2                      none leaving carriageway   \n",
              "3                      none leaving carriageway   \n",
              "4                      none leaving carriageway   \n",
              "...                                         ...   \n",
              "31642                  none leaving carriageway   \n",
              "31643                  none leaving carriageway   \n",
              "31644                  none leaving carriageway   \n",
              "31645                  none leaving carriageway   \n",
              "31646              data missing or out of range   \n",
              "\n",
              "               hit_object_off_carriageway  \\\n",
              "0                      none hit an object   \n",
              "1      at least one vehicle hit an object   \n",
              "2                      none hit an object   \n",
              "3                      none hit an object   \n",
              "4                      none hit an object   \n",
              "...                                   ...   \n",
              "31642                  none hit an object   \n",
              "31643                  none hit an object   \n",
              "31644                  none hit an object   \n",
              "31645                  none hit an object   \n",
              "31646        data missing or out of range   \n",
              "\n",
              "                          first_point_of_impact                 sex_of_driver  \\\n",
              "0                        other points of impact                     all males   \n",
              "1      at least one vehicle with frontal impact                     all males   \n",
              "2      at least one vehicle with frontal impact  data missing or out of range   \n",
              "3      at least one vehicle with frontal impact               male and female   \n",
              "4      at least one vehicle with frontal impact                   all females   \n",
              "...                                         ...                           ...   \n",
              "31642  at least one vehicle with frontal impact                     all males   \n",
              "31643                    other points of impact                     all males   \n",
              "31644  at least one vehicle with frontal impact                     all males   \n",
              "31645                    other points of impact                     all males   \n",
              "31646              data missing or out of range  data missing or out of range   \n",
              "\n",
              "       age_of_oldest_driver accident_severity  \n",
              "0                      63.0           serious  \n",
              "1                      82.0             fatal  \n",
              "2                       NaN           serious  \n",
              "3                       NaN           serious  \n",
              "4                      39.0            slight  \n",
              "...                     ...               ...  \n",
              "31642                  27.0           serious  \n",
              "31643                  27.0           serious  \n",
              "31644                  67.0            slight  \n",
              "31645                  24.0             fatal  \n",
              "31646                  54.0             fatal  \n",
              "\n",
              "[31647 rows x 14 columns]"
            ]
          },
          "execution_count": 418,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e116f3e7",
      "metadata": {
        "id": "e116f3e7"
      },
      "source": [
        "netratat    Returns the number of rows and columns in the DataFrame.\n",
        "When you return the number of rows and columns in a DataFrame, you obtain valuable information about the size and shape of the dataset. This information is useful for several reasons:\n",
        "\n",
        "    Dataset overview: Knowing the number of rows and columns gives you a quick overview of the size of the dataset. It helps you understand the overall structure and scale of the data you are working with.\n",
        "\n",
        "    Data quality check: Verifying the expected number of rows and columns can help identify data quality issues such as missing values or unexpected data transformations. If the number of rows or columns deviates from what you expect, it may indicate data import or processing errors.\n",
        "\n",
        "    Memory usage: The number of rows and columns directly affects the memory consumption of the DataFrame. Large datasets with many rows or columns can require substantial memory resources for processing. Understanding the dimensions of the DataFrame allows you to plan memory usage and optimize your code accordingly.\n",
        "\n",
        "    Indexing and slicing: The number of rows and columns determines the range of valid indices and allows you to perform data indexing and slicing operations accurately. It helps ensure that you access the intended portions of the DataFrame when manipulating or analyzing data.\n",
        "\n",
        "    Data transformations: When performing data transformations or applying functions to specific rows or columns, knowing the number of rows and columns enables you to iterate over the appropriate range and avoid out-of-bounds errors.\n",
        "\n",
        "In summary, returning the number of rows and columns in a DataFrame provides key information about the dataset's size, aids in data quality checks, memory management, indexing operations, and facilitates various data transformations and analysis tasks"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1bbcd5d9",
      "metadata": {
        "id": "1bbcd5d9",
        "outputId": "c3e35e0f-fb6d-4b32-816e-a4f89695c57b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>accident_index</th>\n",
              "      <th>speed_limit</th>\n",
              "      <th>light_conditions</th>\n",
              "      <th>weather_conditions</th>\n",
              "      <th>road_surface_conditions</th>\n",
              "      <th>vehicle_type</th>\n",
              "      <th>junction_location</th>\n",
              "      <th>skidding_and_overturning</th>\n",
              "      <th>vehicle_leaving_carriageway</th>\n",
              "      <th>hit_object_off_carriageway</th>\n",
              "      <th>first_point_of_impact</th>\n",
              "      <th>sex_of_driver</th>\n",
              "      <th>age_of_oldest_driver</th>\n",
              "      <th>accident_severity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2019010225080</td>\n",
              "      <td>30</td>\n",
              "      <td>darkness</td>\n",
              "      <td>other</td>\n",
              "      <td>wet or damp</td>\n",
              "      <td>at least one van</td>\n",
              "      <td>at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>other points of impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>63.0</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2019200908684</td>\n",
              "      <td>30</td>\n",
              "      <td>darkness</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>only cars</td>\n",
              "      <td>at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>at least one vehicle leaving carriageway</td>\n",
              "      <td>at least one vehicle hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>82.0</td>\n",
              "      <td>fatal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2019040860897</td>\n",
              "      <td>40</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>only cars</td>\n",
              "      <td>at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>NaN</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2019460847205</td>\n",
              "      <td>40</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>only cars</td>\n",
              "      <td>not at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>male and female</td>\n",
              "      <td>NaN</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2019051911581</td>\n",
              "      <td>30</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>only cars</td>\n",
              "      <td>not at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>all females</td>\n",
              "      <td>39.0</td>\n",
              "      <td>slight</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  accident_index  speed_limit light_conditions weather_conditions  \\\n",
              "0  2019010225080           30         darkness              other   \n",
              "1  2019200908684           30         darkness               fine   \n",
              "2  2019040860897           40         daylight               fine   \n",
              "3  2019460847205           40         daylight               fine   \n",
              "4  2019051911581           30         daylight               fine   \n",
              "\n",
              "  road_surface_conditions      vehicle_type  \\\n",
              "0             wet or damp  at least one van   \n",
              "1                     dry         only cars   \n",
              "2                     dry         only cars   \n",
              "3                     dry         only cars   \n",
              "4                     dry         only cars   \n",
              "\n",
              "                        junction_location    skidding_and_overturning  \\\n",
              "0      at or within 20 metres of junction  no skidding or overturning   \n",
              "1      at or within 20 metres of junction  no skidding or overturning   \n",
              "2      at or within 20 metres of junction  no skidding or overturning   \n",
              "3  not at or within 20 metres of junction  no skidding or overturning   \n",
              "4  not at or within 20 metres of junction  no skidding or overturning   \n",
              "\n",
              "                vehicle_leaving_carriageway  \\\n",
              "0                  none leaving carriageway   \n",
              "1  at least one vehicle leaving carriageway   \n",
              "2                  none leaving carriageway   \n",
              "3                  none leaving carriageway   \n",
              "4                  none leaving carriageway   \n",
              "\n",
              "           hit_object_off_carriageway  \\\n",
              "0                  none hit an object   \n",
              "1  at least one vehicle hit an object   \n",
              "2                  none hit an object   \n",
              "3                  none hit an object   \n",
              "4                  none hit an object   \n",
              "\n",
              "                      first_point_of_impact                 sex_of_driver  \\\n",
              "0                    other points of impact                     all males   \n",
              "1  at least one vehicle with frontal impact                     all males   \n",
              "2  at least one vehicle with frontal impact  data missing or out of range   \n",
              "3  at least one vehicle with frontal impact               male and female   \n",
              "4  at least one vehicle with frontal impact                   all females   \n",
              "\n",
              "   age_of_oldest_driver accident_severity  \n",
              "0                  63.0           serious  \n",
              "1                  82.0             fatal  \n",
              "2                   NaN           serious  \n",
              "3                   NaN           serious  \n",
              "4                  39.0            slight  "
            ]
          },
          "execution_count": 419,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f6d05aa6",
      "metadata": {
        "id": "f6d05aa6"
      },
      "source": [
        "Number of rows and columns in the DataFrame.\n",
        "The shape provides insights into the structure and organization of the DataFrame. It helps you understand the dimensions and arrangement of the data, which can be crucial for subsequent data manipulation and analysis tasks.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c94f41ee",
      "metadata": {
        "id": "c94f41ee",
        "outputId": "eb17c28a-33f8-48a6-d237-74777efab949"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(31647, 14)"
            ]
          },
          "execution_count": 420,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6c50583c",
      "metadata": {
        "id": "6c50583c"
      },
      "source": [
        "\n",
        "Provides a concise summary of the DataFrame, including the column names, data types, and number of non-null values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "547afbb7",
      "metadata": {
        "id": "547afbb7",
        "outputId": "c4a29bca-617b-41c8-8e56-077f7e6d5c00"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 31647 entries, 0 to 31646\n",
            "Data columns (total 14 columns):\n",
            " #   Column                       Non-Null Count  Dtype  \n",
            "---  ------                       --------------  -----  \n",
            " 0   accident_index               31647 non-null  object \n",
            " 1   speed_limit                  31647 non-null  int64  \n",
            " 2   light_conditions             31647 non-null  object \n",
            " 3   weather_conditions           31647 non-null  object \n",
            " 4   road_surface_conditions      31647 non-null  object \n",
            " 5   vehicle_type                 31647 non-null  object \n",
            " 6   junction_location            31647 non-null  object \n",
            " 7   skidding_and_overturning     31647 non-null  object \n",
            " 8   vehicle_leaving_carriageway  31647 non-null  object \n",
            " 9   hit_object_off_carriageway   31647 non-null  object \n",
            " 10  first_point_of_impact        31647 non-null  object \n",
            " 11  sex_of_driver                31647 non-null  object \n",
            " 12  age_of_oldest_driver         25197 non-null  float64\n",
            " 13  accident_severity            30475 non-null  object \n",
            "dtypes: float64(1), int64(1), object(12)\n",
            "memory usage: 3.4+ MB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2c44cec2",
      "metadata": {
        "id": "2c44cec2"
      },
      "source": [
        "Generates descriptive statistics for numerical columns in the DataFrame, such as count, mean, standard deviation, minimum, and maximum values."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "47cd05a4",
      "metadata": {
        "id": "47cd05a4",
        "outputId": "b2e68d89-ca81-4413-c203-235c38a9ea7b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>speed_limit</th>\n",
              "      <th>age_of_oldest_driver</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>31647.000000</td>\n",
              "      <td>25197.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>36.572029</td>\n",
              "      <td>47.254038</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>13.837362</td>\n",
              "      <td>16.779656</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-1.000000</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>30.000000</td>\n",
              "      <td>34.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>30.000000</td>\n",
              "      <td>47.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>40.000000</td>\n",
              "      <td>59.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>70.000000</td>\n",
              "      <td>101.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        speed_limit  age_of_oldest_driver\n",
              "count  31647.000000          25197.000000\n",
              "mean      36.572029             47.254038\n",
              "std       13.837362             16.779656\n",
              "min       -1.000000              6.000000\n",
              "25%       30.000000             34.000000\n",
              "50%       30.000000             47.000000\n",
              "75%       40.000000             59.000000\n",
              "max       70.000000            101.000000"
            ]
          },
          "execution_count": 422,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "db4b5113",
      "metadata": {
        "id": "db4b5113"
      },
      "source": [
        " List of column names in the DataFrame."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "954f5c05",
      "metadata": {
        "id": "954f5c05",
        "outputId": "2cde0e31-c8e1-468c-ff98-b392ba5d3028"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['accident_index', 'speed_limit', 'light_conditions',\n",
              "       'weather_conditions', 'road_surface_conditions', 'vehicle_type',\n",
              "       'junction_location', 'skidding_and_overturning',\n",
              "       'vehicle_leaving_carriageway', 'hit_object_off_carriageway',\n",
              "       'first_point_of_impact', 'sex_of_driver', 'age_of_oldest_driver',\n",
              "       'accident_severity'],\n",
              "      dtype='object')"
            ]
          },
          "execution_count": 423,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.columns"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9abad9e4",
      "metadata": {
        "id": "9abad9e4"
      },
      "source": [
        "Data types of each column in the DataFrame"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d6f9cb89",
      "metadata": {
        "id": "d6f9cb89",
        "outputId": "546375e6-6b26-46d8-c5d6-237953c42b31"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "accident_index                  object\n",
              "speed_limit                      int64\n",
              "light_conditions                object\n",
              "weather_conditions              object\n",
              "road_surface_conditions         object\n",
              "vehicle_type                    object\n",
              "junction_location               object\n",
              "skidding_and_overturning        object\n",
              "vehicle_leaving_carriageway     object\n",
              "hit_object_off_carriageway      object\n",
              "first_point_of_impact           object\n",
              "sex_of_driver                   object\n",
              "age_of_oldest_driver           float64\n",
              "accident_severity               object\n",
              "dtype: object"
            ]
          },
          "execution_count": 424,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.dtypes"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "3f4268e7",
      "metadata": {
        "id": "3f4268e7"
      },
      "source": [
        "Count of group, excluding missing values. Returns. Series or Data Frame. Count of values within each group."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "18360b6e",
      "metadata": {
        "scrolled": true,
        "id": "18360b6e",
        "outputId": "4bd0fb11-4338-4622-b7ac-cde166aee5a7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "accident severity:\n",
            "accident_severity\n",
            "Fatal          8\n",
            "Serious       25\n",
            "Slight        19\n",
            "fatal       6159\n",
            "serious    11592\n",
            "slight     12672\n",
            "Name: accident_severity, dtype: int64\n",
            "sex_of_driver:\n",
            "sex_of_driver\n",
            "all females                      4016\n",
            "all males                       15494\n",
            "data missing or out of range     5122\n",
            "male and female                  7015\n",
            "Name: sex_of_driver, dtype: int64\n",
            "first_point of impact:\n",
            "first_point_of_impact\n",
            "at least one vehicle with frontal impact    23002\n",
            "data missing or out of range                 1304\n",
            "no impact                                    1333\n",
            "other points of impact                       6008\n",
            "Name: first_point_of_impact, dtype: int64\n",
            "hit_object off carriageway:\n",
            "hit_object_off_carriageway\n",
            "at least one vehicle hit an object     3655\n",
            "data missing or out of range           1863\n",
            "none hit an object                    26129\n",
            "Name: hit_object_off_carriageway, dtype: int64\n",
            "vehicle leaving carriageway:\n",
            "vehicle_leaving_carriageway\n",
            "at least one vehicle leaving carriageway     5661\n",
            "data missing or out of range                 1967\n",
            "none leaving carriageway                    24019\n",
            "Name: vehicle_leaving_carriageway, dtype: int64\n",
            "skidding and_overturning:\n",
            "skidding_and_overturning\n",
            "at least one vehicle skidded or overturned     5226\n",
            "data missing or out of range                   2034\n",
            "no skidding or overturning                    24387\n",
            "Name: skidding_and_overturning, dtype: int64\n",
            "skidding and overturning:\n",
            "skidding_and_overturning\n",
            "at least one vehicle skidded or overturned     5226\n",
            "data missing or out of range                   2034\n",
            "no skidding or overturning                    24387\n",
            "Name: skidding_and_overturning, dtype: int64\n",
            "junction location:\n",
            "junction_location\n",
            "at or within 20 metres of junction        17204\n",
            "data missing or out of range               1470\n",
            "not at or within 20 metres of junction    12973\n",
            "Name: junction_location, dtype: int64\n",
            "vehicle type:\n",
            "vehicle_type\n",
            "at least one biped               8662\n",
            "at least one van                 4040\n",
            "biped and van                    1000\n",
            "data missing or out of range       63\n",
            "only cars                       17487\n",
            "other                             395\n",
            "Name: vehicle_type, dtype: int64\n",
            "road surface conditions:\n",
            "road_surface_conditions\n",
            "data missing or out of range      365\n",
            "dry                             22092\n",
            "flood over 3cm. deep               55\n",
            "other                             374\n",
            "wet or damp                      8761\n",
            "Name: road_surface_conditions, dtype: int64\n",
            "Accident severity counts:\n",
            "accident_severity\n",
            "Fatal          8\n",
            "Serious       25\n",
            "Slight        19\n",
            "fatal       6159\n",
            "serious    11592\n",
            "slight     12672\n",
            "Name: accident_severity, dtype: int64\n",
            "Speed limit counts: \n",
            "speed_limit\n",
            "-1        25\n",
            " 20     3222\n",
            " 30    18682\n",
            " 40     2714\n",
            " 50     1223\n",
            " 60     4186\n",
            " 70     1595\n",
            "Name: speed_limit, dtype: int64\n",
            "light conditions:\n",
            "light_conditions\n",
            "darkness     9437\n",
            "daylight    22210\n",
            "Name: light_conditions, dtype: int64\n",
            "road surface conditions:\n",
            "road_surface_conditions\n",
            "data missing or out of range      365\n",
            "dry                             22092\n",
            "flood over 3cm. deep               55\n",
            "other                             374\n",
            "wet or damp                      8761\n",
            "Name: road_surface_conditions, dtype: int64\n",
            "age of oldest driver:\n",
            "age_of_oldest_driver\n",
            "6.0      1\n",
            "10.0     1\n",
            "11.0     2\n",
            "12.0     3\n",
            "13.0     6\n",
            "        ..\n",
            "96.0     1\n",
            "97.0     1\n",
            "98.0     4\n",
            "99.0     3\n",
            "101.0    1\n",
            "Name: age_of_oldest_driver, Length: 92, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "severity_counts = df.groupby('accident_severity')['accident_severity'].count()\n",
        "print(\"accident severity:\")\n",
        "print(severity_counts)\n",
        "\n",
        "\n",
        "severity_counts = df.groupby('sex_of_driver')['sex_of_driver'].count()\n",
        "print(\"sex_of_driver:\")\n",
        "print(severity_counts)\n",
        "\n",
        "severity_counts = df.groupby('first_point_of_impact')['first_point_of_impact'].count()\n",
        "print(\"first_point of impact:\")\n",
        "print(severity_counts)\n",
        "\n",
        "severity_counts = df.groupby('hit_object_off_carriageway')['hit_object_off_carriageway'].count()\n",
        "print(\"hit_object off carriageway:\")\n",
        "print(severity_counts)\n",
        "\n",
        "severity_counts = df.groupby('vehicle_leaving_carriageway')['vehicle_leaving_carriageway'].count()\n",
        "print(\"vehicle leaving carriageway:\")\n",
        "print(severity_counts)\n",
        "\n",
        "severity_counts = df.groupby('skidding_and_overturning')['skidding_and_overturning'].count()\n",
        "print(\"skidding and_overturning:\")\n",
        "print(severity_counts)\n",
        "\n",
        "severity_counts =df.groupby('skidding_and_overturning')['skidding_and_overturning'].count()\n",
        "print(\"skidding and overturning:\")\n",
        "print(severity_counts)\n",
        "\n",
        "severity_counts = df.groupby('junction_location')['junction_location'].count()\n",
        "print(\"junction location:\")\n",
        "print(severity_counts)\n",
        "\n",
        "severity_counts = df.groupby('vehicle_type')['vehicle_type'].count()\n",
        "print(\"vehicle type:\")\n",
        "print(severity_counts)\n",
        "\n",
        "severity_counts = df.groupby('road_surface_conditions')['road_surface_conditions'].count()\n",
        "print(\"road surface conditions:\")\n",
        "print(severity_counts)\n",
        "\n",
        "severity_counts = df.groupby('accident_severity')['accident_severity'].count()\n",
        "print(\"Accident severity counts:\")\n",
        "print(severity_counts)\n",
        "\n",
        "speed_limit_counts = df.groupby('speed_limit')['speed_limit'].count()\n",
        "print(\"Speed limit counts: \")\n",
        "print(speed_limit_counts)\n",
        "\n",
        "light_conditions_counts = df.groupby('light_conditions')['light_conditions'].count()\n",
        "print(\"light conditions:\")\n",
        "print(light_conditions_counts)\n",
        "\n",
        "road_surface_conditions_counts =df.groupby('road_surface_conditions')['road_surface_conditions'].count()\n",
        "print(\"road surface conditions:\")\n",
        "print(road_surface_conditions_counts)\n",
        "\n",
        "severity_counts = df.groupby('age_of_oldest_driver')['age_of_oldest_driver'].count()\n",
        "print(\"age of oldest driver:\")\n",
        "print(severity_counts)\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9781c143",
      "metadata": {
        "id": "9781c143"
      },
      "source": [
        "Code of df.isnull().sum() returns an array with the number of values that are not present for every single column. The sequence component indicates the total amount of data gaps in the relevant column.\n",
        "\n",
        "Purpose of using, returns a summary of the data that is absent. This data can be very useful for data cleaning and evaluation. Having the amount of values that are absent for every column allows you to make well-informed choices about how to deal with data that isn't present, such as imputing missing values, eliminating columns with significant empty information, or modifying analysis techniques."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8d014171",
      "metadata": {
        "id": "8d014171",
        "outputId": "7a7247cb-d9f9-4347-e472-1b310654d483"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "accident_index                    0\n",
              "speed_limit                       0\n",
              "light_conditions                  0\n",
              "weather_conditions                0\n",
              "road_surface_conditions           0\n",
              "vehicle_type                      0\n",
              "junction_location                 0\n",
              "skidding_and_overturning          0\n",
              "vehicle_leaving_carriageway       0\n",
              "hit_object_off_carriageway        0\n",
              "first_point_of_impact             0\n",
              "sex_of_driver                     0\n",
              "age_of_oldest_driver           6450\n",
              "accident_severity              1172\n",
              "dtype: int64"
            ]
          },
          "execution_count": 426,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d5bf194d",
      "metadata": {
        "id": "d5bf194d"
      },
      "source": [
        "Observation:\n",
        " - 'accident_severity' have str. caps look and str.lower case what they same thing. H as to be standardise the format by changing the values to lowercase.\n",
        " - 'age_of_oldest_driver' have missing value\n",
        " - 'accident_index' the column don't need it\n",
        " - 'speed_limit' have a value -1 what need more investigation. Car was in reverse on the time of accident? It is a Error? The info. \"-1\" have othe menning in corelation with the speed? For time been \"-1\" remain on the DataFrame and deal with that in a later time if need it.Or can happend go out on the time clean the outliers.\n",
        " - Number of values that are not present for every single column \"age_of_oldest_driver\" = 6450, \"accident_severity\" = 1172"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c3826e82",
      "metadata": {
        "id": "c3826e82"
      },
      "outputs": [],
      "source": [
        "df['accident_severity'] = df['accident_severity'].str.lower()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c369c7b6",
      "metadata": {
        "id": "c369c7b6",
        "outputId": "83558a3b-d4c9-4f92-bc62-076c71516dd8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "accident_severity\n",
            "fatal       6167\n",
            "serious    11617\n",
            "slight     12691\n",
            "Name: accident_severity, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "severity_counts = df.groupby('accident_severity')['accident_severity'].count()\n",
        "print(severity_counts)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3e27aff8",
      "metadata": {
        "id": "3e27aff8",
        "outputId": "53cdd5ae-e456-4bff-843b-40c251fb7776"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age_of_oldest_driver</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>25197.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>47.254038</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>16.779656</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>34.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>47.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>59.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>101.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       age_of_oldest_driver\n",
              "count          25197.000000\n",
              "mean              47.254038\n",
              "std               16.779656\n",
              "min                6.000000\n",
              "25%               34.000000\n",
              "50%               47.000000\n",
              "75%               59.000000\n",
              "max              101.000000"
            ]
          },
          "execution_count": 429,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df[['age_of_oldest_driver']].describe(include=\"all\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2a5cdb9b",
      "metadata": {
        "id": "2a5cdb9b"
      },
      "outputs": [],
      "source": [
        "df['age_of_oldest_driver'] = df['age_of_oldest_driver'].fillna(47)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0e51f563",
      "metadata": {
        "id": "0e51f563"
      },
      "outputs": [],
      "source": [
        "df = df.drop('accident_index', axis=1)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6a769ddf",
      "metadata": {
        "id": "6a769ddf"
      },
      "source": [
        "The procedure smoothly removes rows with missing or inaccurate information.There are several options for dealing with data that is absent, including imputation methods that substitute what is missing based on the remaining data. The method used to handle missing data is determined by the particular circumstances, volume of data that is unavailable, and the analysis's aims."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d5f532a4",
      "metadata": {
        "id": "d5f532a4",
        "outputId": "b99e7de2-42a7-445b-a1c0-5aa3bbf6e33e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "speed_limit                    0\n",
              "light_conditions               0\n",
              "weather_conditions             0\n",
              "road_surface_conditions        0\n",
              "vehicle_type                   0\n",
              "junction_location              0\n",
              "skidding_and_overturning       0\n",
              "vehicle_leaving_carriageway    0\n",
              "hit_object_off_carriageway     0\n",
              "first_point_of_impact          0\n",
              "sex_of_driver                  0\n",
              "age_of_oldest_driver           0\n",
              "accident_severity              0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 432,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.dropna(inplace=True)\n",
        "df.head()\n",
        "df.isnull().sum()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "01a279f8",
      "metadata": {
        "id": "01a279f8"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3131b978",
      "metadata": {
        "id": "3131b978",
        "outputId": "d8e1b93d-f8e5-4820-e299-0b64bbf35e90"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>speed_limit</th>\n",
              "      <th>light_conditions</th>\n",
              "      <th>weather_conditions</th>\n",
              "      <th>road_surface_conditions</th>\n",
              "      <th>vehicle_type</th>\n",
              "      <th>junction_location</th>\n",
              "      <th>skidding_and_overturning</th>\n",
              "      <th>vehicle_leaving_carriageway</th>\n",
              "      <th>hit_object_off_carriageway</th>\n",
              "      <th>first_point_of_impact</th>\n",
              "      <th>sex_of_driver</th>\n",
              "      <th>age_of_oldest_driver</th>\n",
              "      <th>accident_severity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>30</td>\n",
              "      <td>darkness</td>\n",
              "      <td>other</td>\n",
              "      <td>wet or damp</td>\n",
              "      <td>at least one van</td>\n",
              "      <td>at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>other points of impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>63.0</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>30</td>\n",
              "      <td>darkness</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>only cars</td>\n",
              "      <td>at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>at least one vehicle leaving carriageway</td>\n",
              "      <td>at least one vehicle hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>82.0</td>\n",
              "      <td>fatal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>40</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>only cars</td>\n",
              "      <td>at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>47.0</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>40</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>only cars</td>\n",
              "      <td>not at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>male and female</td>\n",
              "      <td>47.0</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>30</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>only cars</td>\n",
              "      <td>not at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>all females</td>\n",
              "      <td>39.0</td>\n",
              "      <td>slight</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31642</th>\n",
              "      <td>30</td>\n",
              "      <td>darkness</td>\n",
              "      <td>fine</td>\n",
              "      <td>wet or damp</td>\n",
              "      <td>at least one biped</td>\n",
              "      <td>not at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>27.0</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31643</th>\n",
              "      <td>60</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>other</td>\n",
              "      <td>at or within 20 metres of junction</td>\n",
              "      <td>at least one vehicle skidded or overturned</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>other points of impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>27.0</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31644</th>\n",
              "      <td>70</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>at least one van</td>\n",
              "      <td>not at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>67.0</td>\n",
              "      <td>slight</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31645</th>\n",
              "      <td>30</td>\n",
              "      <td>darkness</td>\n",
              "      <td>fine</td>\n",
              "      <td>wet or damp</td>\n",
              "      <td>only cars</td>\n",
              "      <td>not at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>other points of impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>24.0</td>\n",
              "      <td>fatal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31646</th>\n",
              "      <td>20</td>\n",
              "      <td>darkness</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>at least one biped</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>54.0</td>\n",
              "      <td>fatal</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>30475 rows × 13 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       speed_limit light_conditions weather_conditions  \\\n",
              "0               30         darkness              other   \n",
              "1               30         darkness               fine   \n",
              "2               40         daylight               fine   \n",
              "3               40         daylight               fine   \n",
              "4               30         daylight               fine   \n",
              "...            ...              ...                ...   \n",
              "31642           30         darkness               fine   \n",
              "31643           60         daylight               fine   \n",
              "31644           70         daylight               fine   \n",
              "31645           30         darkness               fine   \n",
              "31646           20         darkness               fine   \n",
              "\n",
              "      road_surface_conditions        vehicle_type  \\\n",
              "0                 wet or damp    at least one van   \n",
              "1                         dry           only cars   \n",
              "2                         dry           only cars   \n",
              "3                         dry           only cars   \n",
              "4                         dry           only cars   \n",
              "...                       ...                 ...   \n",
              "31642             wet or damp  at least one biped   \n",
              "31643                     dry               other   \n",
              "31644                     dry    at least one van   \n",
              "31645             wet or damp           only cars   \n",
              "31646                     dry  at least one biped   \n",
              "\n",
              "                            junction_location  \\\n",
              "0          at or within 20 metres of junction   \n",
              "1          at or within 20 metres of junction   \n",
              "2          at or within 20 metres of junction   \n",
              "3      not at or within 20 metres of junction   \n",
              "4      not at or within 20 metres of junction   \n",
              "...                                       ...   \n",
              "31642  not at or within 20 metres of junction   \n",
              "31643      at or within 20 metres of junction   \n",
              "31644  not at or within 20 metres of junction   \n",
              "31645  not at or within 20 metres of junction   \n",
              "31646            data missing or out of range   \n",
              "\n",
              "                         skidding_and_overturning  \\\n",
              "0                      no skidding or overturning   \n",
              "1                      no skidding or overturning   \n",
              "2                      no skidding or overturning   \n",
              "3                      no skidding or overturning   \n",
              "4                      no skidding or overturning   \n",
              "...                                           ...   \n",
              "31642                  no skidding or overturning   \n",
              "31643  at least one vehicle skidded or overturned   \n",
              "31644                  no skidding or overturning   \n",
              "31645                  no skidding or overturning   \n",
              "31646                data missing or out of range   \n",
              "\n",
              "                    vehicle_leaving_carriageway  \\\n",
              "0                      none leaving carriageway   \n",
              "1      at least one vehicle leaving carriageway   \n",
              "2                      none leaving carriageway   \n",
              "3                      none leaving carriageway   \n",
              "4                      none leaving carriageway   \n",
              "...                                         ...   \n",
              "31642                  none leaving carriageway   \n",
              "31643                  none leaving carriageway   \n",
              "31644                  none leaving carriageway   \n",
              "31645                  none leaving carriageway   \n",
              "31646              data missing or out of range   \n",
              "\n",
              "               hit_object_off_carriageway  \\\n",
              "0                      none hit an object   \n",
              "1      at least one vehicle hit an object   \n",
              "2                      none hit an object   \n",
              "3                      none hit an object   \n",
              "4                      none hit an object   \n",
              "...                                   ...   \n",
              "31642                  none hit an object   \n",
              "31643                  none hit an object   \n",
              "31644                  none hit an object   \n",
              "31645                  none hit an object   \n",
              "31646        data missing or out of range   \n",
              "\n",
              "                          first_point_of_impact                 sex_of_driver  \\\n",
              "0                        other points of impact                     all males   \n",
              "1      at least one vehicle with frontal impact                     all males   \n",
              "2      at least one vehicle with frontal impact  data missing or out of range   \n",
              "3      at least one vehicle with frontal impact               male and female   \n",
              "4      at least one vehicle with frontal impact                   all females   \n",
              "...                                         ...                           ...   \n",
              "31642  at least one vehicle with frontal impact                     all males   \n",
              "31643                    other points of impact                     all males   \n",
              "31644  at least one vehicle with frontal impact                     all males   \n",
              "31645                    other points of impact                     all males   \n",
              "31646              data missing or out of range  data missing or out of range   \n",
              "\n",
              "       age_of_oldest_driver accident_severity  \n",
              "0                      63.0           serious  \n",
              "1                      82.0             fatal  \n",
              "2                      47.0           serious  \n",
              "3                      47.0           serious  \n",
              "4                      39.0            slight  \n",
              "...                     ...               ...  \n",
              "31642                  27.0           serious  \n",
              "31643                  27.0           serious  \n",
              "31644                  67.0            slight  \n",
              "31645                  24.0             fatal  \n",
              "31646                  54.0             fatal  \n",
              "\n",
              "[30475 rows x 13 columns]"
            ]
          },
          "execution_count": 433,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "698b4749",
      "metadata": {
        "id": "698b4749"
      },
      "source": [
        " - To plot, retrieve a selected column from the df.\n",
        " - Make a box diagram to show how the data is dispersed.\n",
        " - Make a scatter diagram that emphasises outliers.\n",
        " - Outliers should be identified and plotted."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f041422b",
      "metadata": {
        "id": "f041422b"
      },
      "outputs": [],
      "source": [
        "df.reset_index(drop=True, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fc5233e6",
      "metadata": {
        "id": "fc5233e6",
        "outputId": "d8410c5b-53d6-47af-bdbc-1dc57645f8d2"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>speed_limit</th>\n",
              "      <th>light_conditions</th>\n",
              "      <th>weather_conditions</th>\n",
              "      <th>road_surface_conditions</th>\n",
              "      <th>vehicle_type</th>\n",
              "      <th>junction_location</th>\n",
              "      <th>skidding_and_overturning</th>\n",
              "      <th>vehicle_leaving_carriageway</th>\n",
              "      <th>hit_object_off_carriageway</th>\n",
              "      <th>first_point_of_impact</th>\n",
              "      <th>sex_of_driver</th>\n",
              "      <th>age_of_oldest_driver</th>\n",
              "      <th>accident_severity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>30</td>\n",
              "      <td>darkness</td>\n",
              "      <td>other</td>\n",
              "      <td>wet or damp</td>\n",
              "      <td>at least one van</td>\n",
              "      <td>at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>other points of impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>63.0</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>30</td>\n",
              "      <td>darkness</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>only cars</td>\n",
              "      <td>at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>at least one vehicle leaving carriageway</td>\n",
              "      <td>at least one vehicle hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>82.0</td>\n",
              "      <td>fatal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>40</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>only cars</td>\n",
              "      <td>at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>47.0</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>40</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>only cars</td>\n",
              "      <td>not at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>male and female</td>\n",
              "      <td>47.0</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>30</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>only cars</td>\n",
              "      <td>not at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>all females</td>\n",
              "      <td>39.0</td>\n",
              "      <td>slight</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30470</th>\n",
              "      <td>30</td>\n",
              "      <td>darkness</td>\n",
              "      <td>fine</td>\n",
              "      <td>wet or damp</td>\n",
              "      <td>at least one biped</td>\n",
              "      <td>not at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>27.0</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30471</th>\n",
              "      <td>60</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>other</td>\n",
              "      <td>at or within 20 metres of junction</td>\n",
              "      <td>at least one vehicle skidded or overturned</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>other points of impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>27.0</td>\n",
              "      <td>serious</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30472</th>\n",
              "      <td>70</td>\n",
              "      <td>daylight</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>at least one van</td>\n",
              "      <td>not at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>at least one vehicle with frontal impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>67.0</td>\n",
              "      <td>slight</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30473</th>\n",
              "      <td>30</td>\n",
              "      <td>darkness</td>\n",
              "      <td>fine</td>\n",
              "      <td>wet or damp</td>\n",
              "      <td>only cars</td>\n",
              "      <td>not at or within 20 metres of junction</td>\n",
              "      <td>no skidding or overturning</td>\n",
              "      <td>none leaving carriageway</td>\n",
              "      <td>none hit an object</td>\n",
              "      <td>other points of impact</td>\n",
              "      <td>all males</td>\n",
              "      <td>24.0</td>\n",
              "      <td>fatal</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30474</th>\n",
              "      <td>20</td>\n",
              "      <td>darkness</td>\n",
              "      <td>fine</td>\n",
              "      <td>dry</td>\n",
              "      <td>at least one biped</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>data missing or out of range</td>\n",
              "      <td>54.0</td>\n",
              "      <td>fatal</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>30475 rows × 13 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       speed_limit light_conditions weather_conditions  \\\n",
              "0               30         darkness              other   \n",
              "1               30         darkness               fine   \n",
              "2               40         daylight               fine   \n",
              "3               40         daylight               fine   \n",
              "4               30         daylight               fine   \n",
              "...            ...              ...                ...   \n",
              "30470           30         darkness               fine   \n",
              "30471           60         daylight               fine   \n",
              "30472           70         daylight               fine   \n",
              "30473           30         darkness               fine   \n",
              "30474           20         darkness               fine   \n",
              "\n",
              "      road_surface_conditions        vehicle_type  \\\n",
              "0                 wet or damp    at least one van   \n",
              "1                         dry           only cars   \n",
              "2                         dry           only cars   \n",
              "3                         dry           only cars   \n",
              "4                         dry           only cars   \n",
              "...                       ...                 ...   \n",
              "30470             wet or damp  at least one biped   \n",
              "30471                     dry               other   \n",
              "30472                     dry    at least one van   \n",
              "30473             wet or damp           only cars   \n",
              "30474                     dry  at least one biped   \n",
              "\n",
              "                            junction_location  \\\n",
              "0          at or within 20 metres of junction   \n",
              "1          at or within 20 metres of junction   \n",
              "2          at or within 20 metres of junction   \n",
              "3      not at or within 20 metres of junction   \n",
              "4      not at or within 20 metres of junction   \n",
              "...                                       ...   \n",
              "30470  not at or within 20 metres of junction   \n",
              "30471      at or within 20 metres of junction   \n",
              "30472  not at or within 20 metres of junction   \n",
              "30473  not at or within 20 metres of junction   \n",
              "30474            data missing or out of range   \n",
              "\n",
              "                         skidding_and_overturning  \\\n",
              "0                      no skidding or overturning   \n",
              "1                      no skidding or overturning   \n",
              "2                      no skidding or overturning   \n",
              "3                      no skidding or overturning   \n",
              "4                      no skidding or overturning   \n",
              "...                                           ...   \n",
              "30470                  no skidding or overturning   \n",
              "30471  at least one vehicle skidded or overturned   \n",
              "30472                  no skidding or overturning   \n",
              "30473                  no skidding or overturning   \n",
              "30474                data missing or out of range   \n",
              "\n",
              "                    vehicle_leaving_carriageway  \\\n",
              "0                      none leaving carriageway   \n",
              "1      at least one vehicle leaving carriageway   \n",
              "2                      none leaving carriageway   \n",
              "3                      none leaving carriageway   \n",
              "4                      none leaving carriageway   \n",
              "...                                         ...   \n",
              "30470                  none leaving carriageway   \n",
              "30471                  none leaving carriageway   \n",
              "30472                  none leaving carriageway   \n",
              "30473                  none leaving carriageway   \n",
              "30474              data missing or out of range   \n",
              "\n",
              "               hit_object_off_carriageway  \\\n",
              "0                      none hit an object   \n",
              "1      at least one vehicle hit an object   \n",
              "2                      none hit an object   \n",
              "3                      none hit an object   \n",
              "4                      none hit an object   \n",
              "...                                   ...   \n",
              "30470                  none hit an object   \n",
              "30471                  none hit an object   \n",
              "30472                  none hit an object   \n",
              "30473                  none hit an object   \n",
              "30474        data missing or out of range   \n",
              "\n",
              "                          first_point_of_impact                 sex_of_driver  \\\n",
              "0                        other points of impact                     all males   \n",
              "1      at least one vehicle with frontal impact                     all males   \n",
              "2      at least one vehicle with frontal impact  data missing or out of range   \n",
              "3      at least one vehicle with frontal impact               male and female   \n",
              "4      at least one vehicle with frontal impact                   all females   \n",
              "...                                         ...                           ...   \n",
              "30470  at least one vehicle with frontal impact                     all males   \n",
              "30471                    other points of impact                     all males   \n",
              "30472  at least one vehicle with frontal impact                     all males   \n",
              "30473                    other points of impact                     all males   \n",
              "30474              data missing or out of range  data missing or out of range   \n",
              "\n",
              "       age_of_oldest_driver accident_severity  \n",
              "0                      63.0           serious  \n",
              "1                      82.0             fatal  \n",
              "2                      47.0           serious  \n",
              "3                      47.0           serious  \n",
              "4                      39.0            slight  \n",
              "...                     ...               ...  \n",
              "30470                  27.0           serious  \n",
              "30471                  27.0           serious  \n",
              "30472                  67.0            slight  \n",
              "30473                  24.0             fatal  \n",
              "30474                  54.0             fatal  \n",
              "\n",
              "[30475 rows x 13 columns]"
            ]
          },
          "execution_count": 435,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0a4da8a6",
      "metadata": {
        "id": "0a4da8a6"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "32899051",
      "metadata": {
        "id": "32899051",
        "outputId": "e0e861e8-2fde-403c-db83-74bd8b86a546"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "ename": "NameError",
          "evalue": "name 'z_scores' is not defined",
          "output_type": "error",
          "traceback": [
            "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "Input \u001b[1;32mIn [436]\u001b[0m, in \u001b[0;36m<cell line: 8>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      6\u001b[0m plt\u001b[38;5;241m.\u001b[39mfigure(figsize\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m8\u001b[39m, \u001b[38;5;241m6\u001b[39m))\n\u001b[0;32m      7\u001b[0m sns\u001b[38;5;241m.\u001b[39mscatterplot(x\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mrange\u001b[39m(\u001b[38;5;28mlen\u001b[39m(column_to_plot)), y\u001b[38;5;241m=\u001b[39mcolumn_to_plot, color\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mblue\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m----> 8\u001b[0m outliers \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mwhere(np\u001b[38;5;241m.\u001b[39mabs(\u001b[43mz_scores\u001b[49m) \u001b[38;5;241m>\u001b[39m threshold)[\u001b[38;5;241m0\u001b[39m]\n\u001b[0;32m      9\u001b[0m outlier_indices \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mwhere(np\u001b[38;5;241m.\u001b[39mabs(z_scores) \u001b[38;5;241m>\u001b[39m threshold)[\u001b[38;5;241m0\u001b[39m]\n\u001b[0;32m     10\u001b[0m sns\u001b[38;5;241m.\u001b[39mscatterplot(x\u001b[38;5;241m=\u001b[39moutlier_indices, y\u001b[38;5;241m=\u001b[39mcolumn_to_plot\u001b[38;5;241m.\u001b[39miloc[outlier_indices], color\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mred\u001b[39m\u001b[38;5;124m'\u001b[39m, marker\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mo\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
            "\u001b[1;31mNameError\u001b[0m: name 'z_scores' is not defined"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "\n",
        "column_to_plot = df['age_of_oldest_driver']\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.boxplot(data=column_to_plot)\n",
        "plt.title('Outliers age_of_oldest_driver')\n",
        "plt.show()\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.scatterplot(x=range(len(column_to_plot)), y=column_to_plot, color='blue')\n",
        "outliers = np.where(np.abs(z_scores) > threshold)[0]\n",
        "outlier_indices = np.where(np.abs(z_scores) > threshold)[0]\n",
        "sns.scatterplot(x=outlier_indices, y=column_to_plot.iloc[outlier_indices], color='red', marker='o')\n",
        "plt.title('Outliers age_of_oldest_driver')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1a5725f0",
      "metadata": {
        "id": "1a5725f0"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "aa6f469b",
      "metadata": {
        "id": "aa6f469b",
        "outputId": "e8127f28-bc02-4889-bc55-8cb8fad1613c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAeAAAAF1CAYAAAAwfzllAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAAsTAAALEwEAmpwYAAAVTElEQVR4nO3de5CdhXnf8e8PCcaYiwVBlolAFq2IKc6ModnaTt1JVGMyXOrAeGyCJ03lFo/aTqLIk7Qx8WSmzYyT2L3EJtiNS8G16qY2hMKAA7XDKFbbpB5qycaNubjIFIpUIYmbDbKMLfL0j31lrzYr9ki7q0ccfT8zmnPeyznvs0LDV+97LkpVIUmSjqzjugeQJOlYZIAlSWpggCVJamCAJUlqYIAlSWpggCVJamCApXmUZGWSSrJ4WP4vSdZ0z3UkJNmU5L2z7POeJH86Zfn5JH/lMI93f5LVh/NY6WhggHVMG4Lw50m+k+SJJL+fZMkhPP7RJG872PaqurSqNszLsGOoqk6uqkcO87Gvr6pNAEn+eZL/OK/DSQvMAOuYleRXgQ8D/xR4FfBm4LXAPUlOaJ5tcefxJS08A6xjUpJTgd8E1lXV56vq+1X1KHAVsBL4u8N+n0rywSmPW51k23D/08AK4HPDpdRfm+E4B1yWTfIPkjyY5JkkX0jy2inbKskvJnkYeDiTPpJkV5JvD2fqP36Qn+c9SR5J8lyS/5Pk56es/7MkH0vyrSQPJbloyuNeleSmJDuSbE/ywSSLRpz34uH5vpXkY0AO6T/CD3/mVVN+r//NcNn++WHu1yT56HD8h5JcOOWxjyZ5W5JLgA8APzc87muHOofUwQDrWPU3gVcAt01dWVXPA3cDF8/2BFX1C8D/Bd4+XEr9Fy+1f5IrmAzFO4ClwH8HPjNttyuBNwHnAz8D/BTwY0yeoV8FPDXD854E/B5waVWdMvxs903Z5U3AN4EzgH8G3Jbk9GHbp4B9wCrgwuGY751t3iRnMPl79xvD834TeMtL/fwjumrKc74AfAn4yrB8K/C70x9QVZ8Hfhu4efjv8IZ5mENacAZYx6ozgCerat8M23YM2+fbPwJ+p6oeHI7728AFU88qh+1PV9Ve4PvAKcB5QIbH7TjIc/8F8ONJTqyqHVV1/5Rtu4CPDmf5NwPfAC5Psgy4DHhfVe2pql3AR4CrR5j3MuD+qrq1qr4PfBR4Yo6/PwC3V9WWqvoucDvw3ar6D1X1InAzk39JkMaCAdax6kngjIO81nrmsH2+vRa4LsmzSZ4Fnmbysu3yKfs8vv9OVf0J8DHg48CuJDcMl84PUFV7gJ9jMpg7ktyV5Lwpu2yvA//VlceAHx3mOX54zP6Z/i3w6hHm/dFps9bU5TnYOeX+3hmWT56HY0hHBQOsY9WXmLzE+Y6pK5OcDFwKbBxW7QFeOWWX10x7nkP558QeB/5hVS2Z8uvEqvofB3u+qvq9qvoJJi9J/xiTbxj7S6rqC1V1MZN/eXgI+HdTNi9PMvX12RXA/xvmeQE4Y8o8p1bV60eYdwdw9v4nHJ7/bPr4z7rpZccA65hUVd9i8k1Y1ye5JMnxSVYCtwDbgE8Pu94HXJbk9CSvAd437al2AqN+jvUTwK8neT384A1Q7zrYzkn+RpI3JTmeyb8IfJfJS83T91uW5IrhteAXgOen7fdq4JeHn/FdwF8D7h4uZ/8x8K+TnJrkuCR/NclPjzDvXcDrk7xjuIrwy/zlv5wcSTuBlUn8f5peNvzDqmPW8KapDwD/Cvg2cC+TZ30XVdULw26fBr4GPMpkrG6e9jS/A/zGcJn2n8xyvNuZ/NjTZ5N8G/g6k2fbB3Mqk2eyzzB52fgp4F/OsN9xwK8weVb7NPDTwD+esv1e4FwmL6v/FvDOqtr/Zq6/B5wAPDAc51Ymz6Jfct6qehJ4F/ChYa5zgT97qZ9/gf3hcPtUkq80ziGNLAe+NCRpnCR5D/Deqvpb3bNIOpBnwJIkNTDAkuZVkk8MX4gx/dcnumeTjiZegpYkqYFnwJIkNTDAkiQ1OKL/4soZZ5xRK1euPJKHlCSpzZYtW56sqqUzbTuiAV65ciWbN28+koeUJKlNkscOts1L0JIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1OKJfxCHpyFu9evUP7m/atKltDkkHmvUMOMnrktw35de3k7wvyelJ7kny8HB72pEYWJKkcTBrgKvqG1V1QVVdAPwE8B3gduBaYGNVnQtsHJYlHUWmnv3OtCypz6G+BnwR8M2qegy4AtgwrN8AXDmPc0mSNNYONcBXA58Z7i+rqh3D/SeAZTM9IMnaJJuTbN69e/dhjilJ0ngZOcBJTgB+FvjD6duqqoCa6XFVdUNVTVTVxNKlM/6LTJIkHXMO5Qz4UuArVbVzWN6Z5EyA4XbXfA8nSdK4OpQAv5sfXn4GuBNYM9xfA9wxX0NJmh/TP3bkx5Cko8dIAU5yEnAxcNuU1R8CLk7yMPC2YVmSJI1gpC/iqKo9wI9MW/cUk++KlnQU86xXOjr5VZSSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNVjcPYCkhbV69eof3N+0aVPbHJIONNIZcJIlSW5N8lCSB5P8ZJLTk9yT5OHh9rSFHlaSpHEx6iXo64DPV9V5wBuAB4FrgY1VdS6wcViWdBSZevY707KkPrMGOMmrgJ8CbgKoqu9V1bPAFcCGYbcNwJULM6IkSeNnlDPgc4DdwL9P8tUkNyY5CVhWVTuGfZ4Als304CRrk2xOsnn37t3zM7UkSS9zowR4MfDXgd+vqguBPUy73FxVBdRMD66qG6pqoqomli5dOtd5JUkaC6MEeBuwraruHZZvZTLIO5OcCTDc7lqYESVJGj+zBriqngAeT/K6YdVFwAPAncCaYd0a4I4FmVDSYZv+sSM/hiQdPUb9HPA64A+SnAA8Avx9JuN9S5JrgMeAqxZmREmSxs9IAa6q+4CJGTZdNK/TSJp3nvVKRye/ilKSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGi0fZKcmjwHPAi8C+qppIcjpwM7ASeBS4qqqeWZgxJUkaL4dyBvy3q+qCqpoYlq8FNlbVucDGYVmSJI1gpDPgg7gCWD3c3wBsAt4/x3l0jLn++uvZunVr9xhjbfv27QAsX768eZLxtmrVKtatW9c9hl5GRj0DLuCPk2xJsnZYt6yqdgz3nwCWzfTAJGuTbE6yeffu3XMcV9Kh2rt3L3v37u0eQ9I0qarZd0qWV9X2JK8G7gHWAXdW1ZIp+zxTVae91PNMTEzU5s2b5ziypEOxfv16AK677rrmSaRjT5ItU166PcBIZ8BVtX243QXcDrwR2JnkzOEAZwK75mdcSZLG36wBTnJSklP23wd+Bvg6cCewZthtDXDHQg0pSdK4GeVNWMuA25Ps3/8/VdXnk3wZuCXJNcBjwFULN6YkSeNl1gBX1SPAG2ZY/xRw0UIMJUnSuPObsCRJamCAJUlqYIAlSWpggCVJamCAJUlqYIAlSWpggCVJamCAJUlqYIAlSWpggCVJamCAJUlqYIAlSWpggCVJamCAJUlqYIAlSWpggCVJamCAJUlqYIAlSWpggCVJamCAJUlqYIAlSWpggCVJamCAJUlqYIAlSWpggCVJamCAJUlqYIAlSWpggCVJamCAJUlqYIAlSWpggCVJamCAJUlqMHKAkyxK8tUkfzQsn5Pk3iRbk9yc5ISFG1OSpPFyKGfA64EHpyx/GPhIVa0CngGumc/BJEkaZyMFOMlZwOXAjcNygLcCtw67bACuXID5JEkaS4tH3O+jwK8BpwzLPwI8W1X7huVtwPL5Ha3X9ddfz9atW7vHkOZs/5/j9evXN08izd2qVatYt25d9xjzYtYAJ/k7wK6q2pJk9aEeIMlaYC3AihUrDvXhbbZu3cp9X3+QF195evco0pwc970CYMsjO5snkeZm0Xee7h5hXo1yBvwW4GeTXAa8AjgVuA5YkmTxcBZ8FrB9pgdX1Q3ADQATExM1L1MfIS++8nT2nndZ9xiSJODEh+7uHmFezfoacFX9elWdVVUrgauBP6mqnwe+CLxz2G0NcMeCTSlJ0piZy+eA3w/8SpKtTL4mfNP8jCRJ0vgb9U1YAFTVJmDTcP8R4I3zP5IkSePPb8KSJKmBAZYkqYEBliSpgQGWJKmBAZYkqYEBliSpgQGWJKmBAZYkqYEBliSpgQGWJKmBAZYkqYEBliSpgQGWJKmBAZYkqYEBliSpgQGWJKmBAZYkqYEBliSpgQGWJKmBAZYkqYEBliSpgQGWJKmBAZYkqYEBliSpgQGWJKmBAZYkqYEBliSpgQGWJKmBAZYkqYEBliSpgQGWJKmBAZYkqYEBliSpwawBTvKKJP8zydeS3J/kN4f15yS5N8nWJDcnOWHhx5UkaTyMcgb8AvDWqnoDcAFwSZI3Ax8GPlJVq4BngGsWbEpJksbMrAGuSc8Pi8cPvwp4K3DrsH4DcOVCDChJ0jhaPMpOSRYBW4BVwMeBbwLPVtW+YZdtwPIFmbDJ9u3bWfTcU5z8lU93jyLNzV+8OHl73KLeOaS5enEf27fvm32/l4mRAlxVLwIXJFkC3A6cN+oBkqwF1gKsWLHiMEbssWTJEvbu3ds9hjRn+/8cn/gK36ahl7sTWLJkSfcQ82akAO9XVc8m+SLwk8CSJIuHs+CzgO0HecwNwA0AExMTNcd5j5gbb7yxewRpXqxfvx6A6667rnkSSVON8i7opcOZL0lOBC4GHgS+CLxz2G0NcMcCzShJ0tgZ5Qz4TGDD8DrwccAtVfVHSR4APpvkg8BXgZsWcE5JksbKrAGuqv8FXDjD+keANy7EUJIkjTu/CUuSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGBliSpAYGWJKkBgZYkqQGswY4ydlJvpjkgST3J1k/rD89yT1JHh5uT1v4cSVJGg+jnAHvA361qs4H3gz8YpLzgWuBjVV1LrBxWJYkSSNYPNsOVbUD2DHcfy7Jg8By4Apg9bDbBmAT8P4FmVJj6/rrr2fr1q3dY4y1/b+/69evb55kvK1atYp169Z1j6GXkVkDPFWSlcCFwL3AsiHOAE8Ayw7ymLXAWoAVK1Yc9qCSDs+JJ57YPYKkGaSqRtsxORn4r8BvVdVtSZ6tqiVTtj9TVS/5OvDExERt3rx5LvNKkvSykWRLVU3MtG2kd0EnOR74z8AfVNVtw+qdSc4ctp8J7JqPYSVJOhaM8i7oADcBD1bV707ZdCewZri/Brhj/seTJGk8jfIa8FuAXwD+PMl9w7oPAB8CbklyDfAYcNWCTChJ0hga5V3QfwrkIJsvmt9xJEk6NvhNWJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDWYNcBJPplkV5KvT1l3epJ7kjw83J62sGNKkjReRjkD/hRwybR11wIbq+pcYOOwLEmSRjRrgKvqvwFPT1t9BbBhuL8BuHJ+x5Ikabwd7mvAy6pqx3D/CWDZwXZMsjbJ5iSbd+/efZiHkyRpvMz5TVhVVUC9xPYbqmqiqiaWLl0618NJkjQWDjfAO5OcCTDc7pq/kSRJGn+HG+A7gTXD/TXAHfMzjiRJx4ZRPob0GeBLwOuSbEtyDfAh4OIkDwNvG5YlSdKIFs+2Q1W9+yCbLprnWSRJOmb4TViSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNTDAkiQ1MMCSJDUwwJIkNZhTgJNckuQbSbYmuXa+hpIkadwddoCTLAI+DlwKnA+8O8n58zWYJEnjbC5nwG8EtlbVI1X1PeCzwBXzM5YkSeNtLgFeDjw+ZXnbsE6SJM1i8UIfIMlaYC3AihUrFvpwkqa5/PLL2bNnD6eccgqf+9znuseRNJjLGfB24Owpy2cN6w5QVTdU1URVTSxdunQOh5N0OPbs2QPAc8891zyJpKnmEuAvA+cmOSfJCcDVwJ3zM5ak+XD55ZcfsPz2t7+9aRJJ0x32Jeiq2pfkl4AvAIuAT1bV/fM2maQ523/2u59nwdLRY06vAVfV3cDd8zSLJEnHDL8JS5KkBgZYGmMnnXTSAcunnHJK0ySSpjPA0hi76667Dlj2Y0jS0cMAS2Nu/1mwZ7/S0WXBv4hDUq/pZ8GSjg6eAUuS1MAAS5LUwABLktTAAEuS1MAAS5LUwABLktTAAEuS1MAAS5LUwABLktQgVXXkDpbsBh47YgeUtN8ZwJPdQ0jHoNdW1dKZNhzRAEvqkWRzVU10zyHph7wELUlSAwMsSVIDAywdG27oHkDSgXwNWJKkBp4BS5LUwABLYy7JJUm+kWRrkmu755E0yUvQ0hhLsgj438DFwDbgy8C7q+qB1sEkeQYsjbk3Alur6pGq+h7wWeCK5pkkYYClcbcceHzK8rZhnaRmBliSpAYGWBpv24GzpyyfNayT1MwAS+Pty8C5Sc5JcgJwNXBn80ySgMXdA0haOFW1L8kvAV8AFgGfrKr7m8eShB9DkiSphZegJUlqYIAlSWpggCVJamCAJUlqYIAlSWpggCVJamCAJUlqYIAlSWrw/wG+kO4lEXzWZAAAAABJRU5ErkJggg==\n",
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "column_to_plot = df['speed_limit']\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.boxplot(data=column_to_plot)\n",
        "plt.title('Outliers speed_limit')\n",
        "plt.show()\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.scatterplot(x=range(len(column_to_plot)), y=column_to_plot, color='blue')\n",
        "sns.scatterplot(x=outlier_indices, y=column_to_plot.iloc[outlier_indices], color='red', marker='o')\n",
        "plt.title('Outliers speed_limit')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cb6debd0",
      "metadata": {
        "id": "cb6debd0",
        "outputId": "0f474e2c-a3d1-4428-d275-f67cf6851a8d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "       speed_limit light_conditions weather_conditions  \\\n",
            "0               30         darkness              other   \n",
            "1               30         darkness               fine   \n",
            "2               40         daylight               fine   \n",
            "3               40         daylight               fine   \n",
            "4               30         daylight               fine   \n",
            "...            ...              ...                ...   \n",
            "30470           30         darkness               fine   \n",
            "30471           60         daylight               fine   \n",
            "30472           70         daylight               fine   \n",
            "30473           30         darkness               fine   \n",
            "30474           20         darkness               fine   \n",
            "\n",
            "      road_surface_conditions        vehicle_type  \\\n",
            "0                 wet or damp    at least one van   \n",
            "1                         dry           only cars   \n",
            "2                         dry           only cars   \n",
            "3                         dry           only cars   \n",
            "4                         dry           only cars   \n",
            "...                       ...                 ...   \n",
            "30470             wet or damp  at least one biped   \n",
            "30471                     dry               other   \n",
            "30472                     dry    at least one van   \n",
            "30473             wet or damp           only cars   \n",
            "30474                     dry  at least one biped   \n",
            "\n",
            "                            junction_location  \\\n",
            "0          at or within 20 metres of junction   \n",
            "1          at or within 20 metres of junction   \n",
            "2          at or within 20 metres of junction   \n",
            "3      not at or within 20 metres of junction   \n",
            "4      not at or within 20 metres of junction   \n",
            "...                                       ...   \n",
            "30470  not at or within 20 metres of junction   \n",
            "30471      at or within 20 metres of junction   \n",
            "30472  not at or within 20 metres of junction   \n",
            "30473  not at or within 20 metres of junction   \n",
            "30474            data missing or out of range   \n",
            "\n",
            "                         skidding_and_overturning  \\\n",
            "0                      no skidding or overturning   \n",
            "1                      no skidding or overturning   \n",
            "2                      no skidding or overturning   \n",
            "3                      no skidding or overturning   \n",
            "4                      no skidding or overturning   \n",
            "...                                           ...   \n",
            "30470                  no skidding or overturning   \n",
            "30471  at least one vehicle skidded or overturned   \n",
            "30472                  no skidding or overturning   \n",
            "30473                  no skidding or overturning   \n",
            "30474                data missing or out of range   \n",
            "\n",
            "                    vehicle_leaving_carriageway  \\\n",
            "0                      none leaving carriageway   \n",
            "1      at least one vehicle leaving carriageway   \n",
            "2                      none leaving carriageway   \n",
            "3                      none leaving carriageway   \n",
            "4                      none leaving carriageway   \n",
            "...                                         ...   \n",
            "30470                  none leaving carriageway   \n",
            "30471                  none leaving carriageway   \n",
            "30472                  none leaving carriageway   \n",
            "30473                  none leaving carriageway   \n",
            "30474              data missing or out of range   \n",
            "\n",
            "               hit_object_off_carriageway  \\\n",
            "0                      none hit an object   \n",
            "1      at least one vehicle hit an object   \n",
            "2                      none hit an object   \n",
            "3                      none hit an object   \n",
            "4                      none hit an object   \n",
            "...                                   ...   \n",
            "30470                  none hit an object   \n",
            "30471                  none hit an object   \n",
            "30472                  none hit an object   \n",
            "30473                  none hit an object   \n",
            "30474        data missing or out of range   \n",
            "\n",
            "                          first_point_of_impact                 sex_of_driver  \\\n",
            "0                        other points of impact                     all males   \n",
            "1      at least one vehicle with frontal impact                     all males   \n",
            "2      at least one vehicle with frontal impact  data missing or out of range   \n",
            "3      at least one vehicle with frontal impact               male and female   \n",
            "4      at least one vehicle with frontal impact                   all females   \n",
            "...                                         ...                           ...   \n",
            "30470  at least one vehicle with frontal impact                     all males   \n",
            "30471                    other points of impact                     all males   \n",
            "30472  at least one vehicle with frontal impact                     all males   \n",
            "30473                    other points of impact                     all males   \n",
            "30474              data missing or out of range  data missing or out of range   \n",
            "\n",
            "       age_of_oldest_driver accident_severity  \n",
            "0                      63.0           serious  \n",
            "1                      82.0             fatal  \n",
            "2                      47.0           serious  \n",
            "3                      47.0           serious  \n",
            "4                      39.0            slight  \n",
            "...                     ...               ...  \n",
            "30470                  27.0           serious  \n",
            "30471                  27.0           serious  \n",
            "30472                  67.0            slight  \n",
            "30473                  24.0             fatal  \n",
            "30474                  54.0             fatal  \n",
            "\n",
            "[30441 rows x 13 columns]\n"
          ]
        }
      ],
      "source": [
        "z_scores_age = (df['age_of_oldest_driver'] - df['age_of_oldest_driver'].mean()) / df['age_of_oldest_driver'].std()\n",
        "z_scores_speed = (df['speed_limit'] - df['speed_limit'].mean()) / df['speed_limit'].std()\n",
        "\n",
        "# Set the threshold for outlier detection\n",
        "threshold = 3\n",
        "\n",
        "# Find the indices of outliers for both columns\n",
        "outlier_indices = np.where((np.abs(z_scores_age) > threshold) | (np.abs(z_scores_speed) > threshold))[0]\n",
        "\n",
        "# Drop the rows with outliers\n",
        "df_filtered = df.drop(outlier_indices)\n",
        "\n",
        "# Print the filtered DataFrame\n",
        "print(df_filtered)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4c686e1b",
      "metadata": {
        "id": "4c686e1b"
      },
      "source": [
        "Goal of this code is to generate a countplot that illustrates the spread of the variable 'accident_severity' in  df. It aids in comprehending the rate or quantity of various accident severity levels and how they are dispersed. Also modifies the plot's look by changing the adding labels,, figure dimensions, a legend.\n",
        "\n",
        "You can obtain insights, detect structures, and fluently transmit details with outsiders by visualising the data. It is very beneficial when evaluating investigative data and presenting crucial conclusions."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6d758c1f",
      "metadata": {
        "id": "6d758c1f",
        "outputId": "89a9c753-56bc-4748-a6a0-72912021a46f"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(5, 5))\n",
        "ax = sns.countplot(x='accident_severity', hue='accident_severity', data=df)\n",
        "ax.set_xticklabels(['fatal', 'serious', 'slight'])\n",
        "plt.legend(['fatal', 'serious', 'slight'])\n",
        "plt.grid(alpha=0.8)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0919b4d2",
      "metadata": {
        "id": "0919b4d2",
        "outputId": "6f4c7c32-e937-4227-bb32-9774773eb14b"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.bar(road_surface_conditions_counts.index, road_surface_conditions_counts.values)\n",
        "plt.title(\"Road_Surface_Conditions\")\n",
        "plt.xlabel(\"road_surface_conditions\")\n",
        "plt.ylabel(\"count\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "af74d69e",
      "metadata": {
        "id": "af74d69e",
        "outputId": "551eb159-16ef-40f2-d05f-c4b25fc25c36"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "weather_conditions: \n",
            "weather_conditions\n",
            "data missing or out of range      936\n",
            "fine                            24226\n",
            "fog or mist                       111\n",
            "other                            5202\n",
            "Name: weather_conditions, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "weather_conditions_counts = df.groupby('weather_conditions')['weather_conditions'].count()\n",
        "print(\"weather_conditions: \")\n",
        "print(weather_conditions_counts)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f4cdf85f",
      "metadata": {
        "id": "f4cdf85f",
        "outputId": "95cff03b-b7de-4569-cbba-03c4100f77d4"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.bar(light_conditions_counts.index, light_conditions_counts.values)\n",
        "plt.title(\"Light Conditions Counts\")\n",
        "plt.xlabel(\"Road light conditions\")\n",
        "plt.ylabel(\"count\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1142a7bf",
      "metadata": {
        "id": "1142a7bf",
        "outputId": "243c4be3-19fc-496b-f365-08f19b27e6dd"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.bar(severity_counts.index, severity_counts.values)\n",
        "plt.title(\"Road Accident Severity Counts\")\n",
        "plt.xlabel(\"severity\")\n",
        "plt.ylabel(\"count\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "51dd4b05",
      "metadata": {
        "id": "51dd4b05",
        "outputId": "d7a3a6b2-ae10-460b-e7f4-11fd88287580"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.bar(speed_limit_counts.index,speed_limit_counts.values)\n",
        "plt.title(\"Road Speed Limit\")\n",
        "plt.xlabel(\"severity\")\n",
        "plt.ylabel(\"count\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0d76f679",
      "metadata": {
        "id": "0d76f679",
        "outputId": "a64d3f61-6240-40aa-8d20-9009b9f1fe57"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[<Axes: title={'center': 'speed_limit'}>,\n",
              "        <Axes: title={'center': 'age_of_oldest_driver'}>]], dtype=object)"
            ]
          },
          "execution_count": 445,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "df.hist(figsize=(10,5))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "b97c59ce",
      "metadata": {
        "id": "b97c59ce"
      },
      "source": [
        "The heatmap is an identified by colour illustration of the relationship between the values, with different colours indicating more either favourable or adverse correlations. It aids in determining the degree and direction of variables' relationships.\n",
        "Could swiftly determine which parameters are either advantageously or adversely linked, giving knowledge about possible connections or connections among mathematical properties. In a analysis environment, this information might be useful for feature selection, finding convergence.\n",
        "A coefficient that is positive shows an upward correlation, which means that as one variable increases, so does another. A value that is negative shows an opposite correlation, which means that as one variable grows, so does the other."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b98a7c19",
      "metadata": {
        "id": "b98a7c19",
        "outputId": "c00c772d-f051-42a2-aa62-808b77b00826"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x576 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.subplots(figsize=(15, 8))\n",
        "X_num_total = pd.DataFrame(df)\n",
        "sns.heatmap(X_num_total.corr(numeric_only=True), cmap=\"YlGnBu\", annot=True)\n",
        "plt.title('Correlation Matrix')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e4932516",
      "metadata": {
        "id": "e4932516",
        "outputId": "ba019fb6-ccba-4b3f-a2f8-9289dcffcb7a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "speed_limit                      int64\n",
              "light_conditions                object\n",
              "weather_conditions              object\n",
              "road_surface_conditions         object\n",
              "vehicle_type                    object\n",
              "junction_location               object\n",
              "skidding_and_overturning        object\n",
              "vehicle_leaving_carriageway     object\n",
              "hit_object_off_carriageway      object\n",
              "first_point_of_impact           object\n",
              "sex_of_driver                   object\n",
              "age_of_oldest_driver           float64\n",
              "accident_severity               object\n",
              "dtype: object"
            ]
          },
          "execution_count": 447,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.dtypes\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f4a7098a",
      "metadata": {
        "id": "f4a7098a"
      },
      "source": [
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cc1a3744",
      "metadata": {
        "id": "cc1a3744",
        "outputId": "f5b65f52-a812-4d95-ddcd-3b2b2bf0b0b8"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([30, 40, 60, 50, 20, 70, -1], dtype=int64)"
            ]
          },
          "execution_count": 448,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['speed_limit'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7765f7ca",
      "metadata": {
        "id": "7765f7ca",
        "outputId": "ed1c24ae-73e0-402e-90b9-806d2504d94b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['darkness', 'daylight'], dtype=object)"
            ]
          },
          "execution_count": 449,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['light_conditions'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d3370194",
      "metadata": {
        "id": "d3370194"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "df['light_conditions']= le.fit_transform(df['light_conditions'])\n",
        "mapping = {'darkness':0, 'daylight':1}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "404ae0ec",
      "metadata": {
        "id": "404ae0ec",
        "outputId": "b9142157-d576-4d64-e8d7-8dda7479b56a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['other', 'fine', 'data missing or out of range', 'fog or mist'],\n",
              "      dtype=object)"
            ]
          },
          "execution_count": 451,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['weather_conditions'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "02126f25",
      "metadata": {
        "id": "02126f25"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "df['weather_conditions']= le.fit_transform(df['weather_conditions'])\n",
        "mapping = {'other':0, 'fine':1, 'data missing or out of range':2, 'fog or mist':3}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a7efc729",
      "metadata": {
        "id": "a7efc729",
        "outputId": "ebe971d9-e9d6-4ed3-db4b-7c7c6198e720"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['at or within 20 metres of junction',\n",
              "       'not at or within 20 metres of junction',\n",
              "       'data missing or out of range'], dtype=object)"
            ]
          },
          "execution_count": 453,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['junction_location' ].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3e3900d5",
      "metadata": {
        "id": "3e3900d5"
      },
      "outputs": [],
      "source": [
        "df['junction_location']= le.fit_transform(df['junction_location'])\n",
        "mapping = {'at or within 20 metres of junction':0, 'not at or within 20 metres of junction':1,\n",
        "           'at least one biped':2,'data missing or out of range':3}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3163d89c",
      "metadata": {
        "id": "3163d89c",
        "outputId": "044567b3-63d6-401f-fae0-c13f7fbb86c1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['wet or damp', 'dry', 'data missing or out of range', 'other',\n",
              "       'flood over 3cm. deep'], dtype=object)"
            ]
          },
          "execution_count": 455,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['road_surface_conditions' ].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d1c32df5",
      "metadata": {
        "id": "d1c32df5"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "df['road_surface_conditions']= le.fit_transform(df['road_surface_conditions'])\n",
        "mapping = {'wet or damp':0, 'dry':1, 'data missing or out of range':2, 'other':3,\n",
        "       'flood over 3cm. deep':4}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c4394714",
      "metadata": {
        "id": "c4394714",
        "outputId": "2ea71e46-cd96-484b-8648-964d6ea4d5b5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['no skidding or overturning',\n",
              "       'at least one vehicle skidded or overturned',\n",
              "       'data missing or out of range'], dtype=object)"
            ]
          },
          "execution_count": 457,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['skidding_and_overturning' ].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2c263817",
      "metadata": {
        "id": "2c263817"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "df['skidding_and_overturning']= le.fit_transform(df['skidding_and_overturning'])\n",
        "mapping = {'no skidding or overturning':0, 'at least one vehicle skidded or overturned':1, 'data missing or out of range':2}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "06551dac",
      "metadata": {
        "id": "06551dac",
        "outputId": "1bc527f8-b2f0-4869-d488-e2b91694a9c1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['none leaving carriageway',\n",
              "       'at least one vehicle leaving carriageway',\n",
              "       'data missing or out of range'], dtype=object)"
            ]
          },
          "execution_count": 459,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['vehicle_leaving_carriageway' ].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "36fd4904",
      "metadata": {
        "id": "36fd4904"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "df['vehicle_leaving_carriageway']= le.fit_transform(df['vehicle_leaving_carriageway'])\n",
        "mapping = {'none leaving carriageway':0,\n",
        "       'at least one vehicle leaving carriageway':1,\n",
        "       'data missing or out of range':2}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "407b7520",
      "metadata": {
        "id": "407b7520",
        "outputId": "3ca7044a-effa-43e8-b0db-f15d0db54403"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['none hit an object', 'at least one vehicle hit an object',\n",
              "       'data missing or out of range'], dtype=object)"
            ]
          },
          "execution_count": 461,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['hit_object_off_carriageway'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cb5e4f74",
      "metadata": {
        "id": "cb5e4f74"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "df['hit_object_off_carriageway']= le.fit_transform(df['hit_object_off_carriageway'])\n",
        "mapping = {'none hit an object':0, 'at least one vehicle hit an object':1,\n",
        "       'data missing or out of range':2}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a0d25a79",
      "metadata": {
        "id": "a0d25a79",
        "outputId": "17e997d6-54da-44d4-ba27-14fd0deb9382"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['other points of impact',\n",
              "       'at least one vehicle with frontal impact',\n",
              "       'data missing or out of range', 'no impact'], dtype=object)"
            ]
          },
          "execution_count": 463,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['first_point_of_impact'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b3ea9649",
      "metadata": {
        "id": "b3ea9649"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "df['first_point_of_impact']= le.fit_transform(df['first_point_of_impact'])\n",
        "mapping = {'other points of impact':0,\n",
        "       'at least one vehicle with frontal impact':1,\n",
        "       'data missing or out of range':2, 'no impact':3}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "091be21d",
      "metadata": {
        "id": "091be21d",
        "outputId": "c5acf828-7a04-4932-813a-10680687edf5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['all males', 'data missing or out of range', 'male and female',\n",
              "       'all females'], dtype=object)"
            ]
          },
          "execution_count": 465,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['sex_of_driver'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d6a6f5e5",
      "metadata": {
        "id": "d6a6f5e5"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "df['sex_of_driver']= le.fit_transform(df['sex_of_driver'])\n",
        "mapping = {'all males':0, 'data missing or out of range':1, 'male and female':2,\n",
        "       'all females':3}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0f241e58",
      "metadata": {
        "id": "0f241e58",
        "outputId": "bbbe9163-f567-4a95-ff91-3d7c1016de51"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['serious', 'fatal', 'slight'], dtype=object)"
            ]
          },
          "execution_count": 467,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['accident_severity'].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "04ce2ef8",
      "metadata": {
        "id": "04ce2ef8"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "df['accident_severity']= le.fit_transform(df['accident_severity'])\n",
        "mapping = {'serious':0, 'fatal':1, 'slight':2, 'nan':3, }"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "edd9e794",
      "metadata": {
        "id": "edd9e794",
        "outputId": "bba6284c-184c-47a8-c89b-981a14b8d859"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['at least one van', 'only cars', 'at least one biped', 'other',\n",
              "       'biped and van', 'data missing or out of range'], dtype=object)"
            ]
          },
          "execution_count": 469,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['vehicle_type' ].unique()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "83582f1e",
      "metadata": {
        "id": "83582f1e"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "le = LabelEncoder()\n",
        "df['vehicle_type']= le.fit_transform(df['vehicle_type'])\n",
        "mapping = {'at least one van':0, 'only cars':1, 'at least one biped':2, 'other':3,\n",
        "       'biped and van':3, 'data missing or out of range':4}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "491c63b9",
      "metadata": {
        "id": "491c63b9",
        "outputId": "917cdc58-3fdd-462f-fcf2-2d14e393bf28"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>speed_limit</th>\n",
              "      <th>light_conditions</th>\n",
              "      <th>weather_conditions</th>\n",
              "      <th>road_surface_conditions</th>\n",
              "      <th>vehicle_type</th>\n",
              "      <th>junction_location</th>\n",
              "      <th>skidding_and_overturning</th>\n",
              "      <th>vehicle_leaving_carriageway</th>\n",
              "      <th>hit_object_off_carriageway</th>\n",
              "      <th>first_point_of_impact</th>\n",
              "      <th>sex_of_driver</th>\n",
              "      <th>age_of_oldest_driver</th>\n",
              "      <th>accident_severity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>30</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>63.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>30</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>82.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>40</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>47.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>40</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>47.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>30</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>39.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30470</th>\n",
              "      <td>30</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>27.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30471</th>\n",
              "      <td>60</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>27.0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30472</th>\n",
              "      <td>70</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>67.0</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30473</th>\n",
              "      <td>30</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>24.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30474</th>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>54.0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>30475 rows × 13 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       speed_limit  light_conditions  weather_conditions  \\\n",
              "0               30                 0                   3   \n",
              "1               30                 0                   1   \n",
              "2               40                 1                   1   \n",
              "3               40                 1                   1   \n",
              "4               30                 1                   1   \n",
              "...            ...               ...                 ...   \n",
              "30470           30                 0                   1   \n",
              "30471           60                 1                   1   \n",
              "30472           70                 1                   1   \n",
              "30473           30                 0                   1   \n",
              "30474           20                 0                   1   \n",
              "\n",
              "       road_surface_conditions  vehicle_type  junction_location  \\\n",
              "0                            4             1                  0   \n",
              "1                            1             4                  0   \n",
              "2                            1             4                  0   \n",
              "3                            1             4                  2   \n",
              "4                            1             4                  2   \n",
              "...                        ...           ...                ...   \n",
              "30470                        4             0                  2   \n",
              "30471                        1             5                  0   \n",
              "30472                        1             1                  2   \n",
              "30473                        4             4                  2   \n",
              "30474                        1             0                  1   \n",
              "\n",
              "       skidding_and_overturning  vehicle_leaving_carriageway  \\\n",
              "0                             2                            2   \n",
              "1                             2                            0   \n",
              "2                             2                            2   \n",
              "3                             2                            2   \n",
              "4                             2                            2   \n",
              "...                         ...                          ...   \n",
              "30470                         2                            2   \n",
              "30471                         0                            2   \n",
              "30472                         2                            2   \n",
              "30473                         2                            2   \n",
              "30474                         1                            1   \n",
              "\n",
              "       hit_object_off_carriageway  first_point_of_impact  sex_of_driver  \\\n",
              "0                               2                      3              1   \n",
              "1                               0                      0              1   \n",
              "2                               2                      0              2   \n",
              "3                               2                      0              3   \n",
              "4                               2                      0              0   \n",
              "...                           ...                    ...            ...   \n",
              "30470                           2                      0              1   \n",
              "30471                           2                      3              1   \n",
              "30472                           2                      0              1   \n",
              "30473                           2                      3              1   \n",
              "30474                           1                      1              2   \n",
              "\n",
              "       age_of_oldest_driver  accident_severity  \n",
              "0                      63.0                  1  \n",
              "1                      82.0                  0  \n",
              "2                      47.0                  1  \n",
              "3                      47.0                  1  \n",
              "4                      39.0                  2  \n",
              "...                     ...                ...  \n",
              "30470                  27.0                  1  \n",
              "30471                  27.0                  1  \n",
              "30472                  67.0                  2  \n",
              "30473                  24.0                  0  \n",
              "30474                  54.0                  0  \n",
              "\n",
              "[30475 rows x 13 columns]"
            ]
          },
          "execution_count": 471,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3e6ee1c8",
      "metadata": {
        "id": "3e6ee1c8"
      },
      "outputs": [],
      "source": [
        "df = df.astype(float)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "49898f90",
      "metadata": {
        "id": "49898f90",
        "outputId": "86448860-8492-406f-9259-2ff093987996"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "speed_limit                    float64\n",
              "light_conditions               float64\n",
              "weather_conditions             float64\n",
              "road_surface_conditions        float64\n",
              "vehicle_type                   float64\n",
              "junction_location              float64\n",
              "skidding_and_overturning       float64\n",
              "vehicle_leaving_carriageway    float64\n",
              "hit_object_off_carriageway     float64\n",
              "first_point_of_impact          float64\n",
              "sex_of_driver                  float64\n",
              "age_of_oldest_driver           float64\n",
              "accident_severity              float64\n",
              "dtype: object"
            ]
          },
          "execution_count": 473,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.dtypes"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "072a056a",
      "metadata": {
        "id": "072a056a"
      },
      "source": [
        " -  Split the data into features (X) and target variable (y)\n",
        " -  Perform one-hot encoding for categorical variables\n",
        " -  Fill missing values with a specific value or strategy if needed\n",
        " -  Normalize or standardize numerical features\n",
        " -  Split the data into training, validation, and test sets\n",
        " -  Upsample the minority class if the dataset is imbalanced\n",
        " -  Define the classifiers\n",
        " - Iterate over the classifiers\n",
        " -  Train the classifier\n",
        " -  Perform cross-validation\n",
        " -  Evaluate the performance\n",
        " -  Predict on the validation set\n",
        " -  Evaluate the predictions"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "64a65e59",
      "metadata": {
        "id": "64a65e59"
      },
      "source": [
        "Insert the neccessery packages"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "51ea2497",
      "metadata": {
        "id": "51ea2497"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder, MinMaxScaler\n",
        "from sklearn.utils import resample\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.ensemble import GradientBoostingClassifier"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "069f993b",
      "metadata": {
        "id": "069f993b",
        "outputId": "ae2dae3e-2dd4-4607-bcdd-9aa8d557fa88"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "The dataset contains 1 different data types and they are: float64\n",
            "There are a total of 0 categorical features in the dataset.\n",
            "Unique values for each categorical column are:\n",
            " speed_limit                     7\n",
            "light_conditions                2\n",
            "weather_conditions              4\n",
            "road_surface_conditions         5\n",
            "vehicle_type                    6\n",
            "junction_location               3\n",
            "skidding_and_overturning        3\n",
            "vehicle_leaving_carriageway     3\n",
            "hit_object_off_carriageway      3\n",
            "first_point_of_impact           4\n",
            "sex_of_driver                   4\n",
            "age_of_oldest_driver           92\n",
            "accident_severity               3\n",
            "dtype: int64\n"
          ]
        }
      ],
      "source": [
        "column_datatypes = set()\n",
        "categorical_features = []\n",
        "for column in df.columns:\n",
        "    column_datatypes.add(str(df[column].dtype))\n",
        "print(\"The dataset contains {} different data types and they are: {}\".format(len(column_datatypes),\n",
        "                                                                             \", \".join(column_datatypes)))\n",
        "print('There are a total of {} categorical features in the dataset.'.format(len(categorical_features)))\n",
        "print('Unique values for each categorical column are:\\n {}'.format(df.nunique()))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "ea032586",
      "metadata": {
        "id": "ea032586"
      },
      "source": [
        "The goal of the code below is to learn about the data types represented in the DataFrame's columns. It aids in comprehending the dataset's variety and distribution of data kinds. This data is useful for data exploration and preprocessing ta = (\"The dataset contains {} different data types and they are: {}sks.and manipulate the data to show what you need to know. In this case"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f8af5962",
      "metadata": {
        "id": "f8af5962"
      },
      "outputs": [],
      "source": [
        "data = df.dropna(axis=0).reset_index(drop=True)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3b06d110",
      "metadata": {
        "id": "3b06d110",
        "outputId": "e9095913-6ef4-4e11-b761-ea12bed758c7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "speed_limit                    0\n",
              "light_conditions               0\n",
              "weather_conditions             0\n",
              "road_surface_conditions        0\n",
              "vehicle_type                   0\n",
              "junction_location              0\n",
              "skidding_and_overturning       0\n",
              "vehicle_leaving_carriageway    0\n",
              "hit_object_off_carriageway     0\n",
              "first_point_of_impact          0\n",
              "sex_of_driver                  0\n",
              "age_of_oldest_driver           0\n",
              "accident_severity              0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 477,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.isna().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a285d502",
      "metadata": {
        "id": "a285d502",
        "outputId": "c20e0fd9-be53-470a-c9af-9520af27fe8f"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x576 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.subplots(figsize=(15,8))\n",
        "sns.heatmap(X_num_total.corr(), cmap=\"YlGnBu\", annot=True)\n",
        "plt.title('Correlation Matrix')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fd6564b5",
      "metadata": {
        "id": "fd6564b5",
        "outputId": "77ceff2d-37f5-4c0c-86f4-aa5f471163c0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "610/610 [==============================] - 2s 2ms/step - loss: 0.7678 - accuracy: 0.6856 - val_loss: 0.7115 - val_accuracy: 0.7285\n",
            "Epoch 2/10\n",
            "610/610 [==============================] - 1s 2ms/step - loss: 0.6845 - accuracy: 0.7399 - val_loss: 0.6993 - val_accuracy: 0.7354\n",
            "Epoch 3/10\n",
            "610/610 [==============================] - 1s 1ms/step - loss: 0.6618 - accuracy: 0.7483 - val_loss: 0.6666 - val_accuracy: 0.7469\n",
            "Epoch 4/10\n",
            "610/610 [==============================] - 1s 2ms/step - loss: 0.6507 - accuracy: 0.7514 - val_loss: 0.6609 - val_accuracy: 0.7498\n",
            "Epoch 5/10\n",
            "610/610 [==============================] - 1s 2ms/step - loss: 0.6410 - accuracy: 0.7531 - val_loss: 0.6510 - val_accuracy: 0.7475\n",
            "Epoch 6/10\n",
            "610/610 [==============================] - 1s 2ms/step - loss: 0.6330 - accuracy: 0.7556 - val_loss: 0.6444 - val_accuracy: 0.7488\n",
            "Epoch 7/10\n",
            "610/610 [==============================] - 1s 1ms/step - loss: 0.6253 - accuracy: 0.7582 - val_loss: 0.6498 - val_accuracy: 0.7516\n",
            "Epoch 8/10\n",
            "610/610 [==============================] - 1s 2ms/step - loss: 0.6211 - accuracy: 0.7590 - val_loss: 0.6341 - val_accuracy: 0.7553\n",
            "Epoch 9/10\n",
            "610/610 [==============================] - 1s 2ms/step - loss: 0.6147 - accuracy: 0.7627 - val_loss: 0.6354 - val_accuracy: 0.7566\n",
            "Epoch 10/10\n",
            "610/610 [==============================] - 1s 2ms/step - loss: 0.6119 - accuracy: 0.7645 - val_loss: 0.6267 - val_accuracy: 0.7547\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "191/191 [==============================] - 0s 1ms/step - loss: 0.6110 - accuracy: 0.7637\n",
            "Test Loss: 0.6109961271286011\n",
            "Test Accuracy: 0.7637407779693604\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder, MinMaxScaler\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Split the data into features (X) and target variable (y)\n",
        "X = df.drop('accident_severity', axis=1)\n",
        "y = df['accident_severity']\n",
        "\n",
        "# Split the data into training and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Perform normalization using MinMaxScaler\n",
        "scaler = MinMaxScaler()\n",
        "X_train_normalized = scaler.fit_transform(X_train)\n",
        "X_test_normalized = scaler.transform(X_test)\n",
        "\n",
        "# Convert target variable to categorical\n",
        "label_encoder = LabelEncoder()\n",
        "y_train_encoded = label_encoder.fit_transform(y_train)\n",
        "num_classes = len(label_encoder.classes_)\n",
        "y_train_categorical = to_categorical(y_train_encoded, num_classes=num_classes)\n",
        "\n",
        "# Define the number of classes\n",
        "num_classes = 3  # Update with the actual number of classes in your training data\n",
        "\n",
        "# Create the model\n",
        "model = Sequential()\n",
        "model.add(Dense(64, activation='relu', input_shape=(X_train.shape[1],)))\n",
        "model.add(Dense(64, activation='relu'))\n",
        "model.add(Dense(num_classes, activation='softmax'))\n",
        "\n",
        "# Compile the model\n",
        "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
        "\n",
        "# Train the model and store history\n",
        "history = model.fit(X_train_normalized, y_train_categorical, epochs=10, batch_size=32, validation_split=0.2)\n",
        "\n",
        "# Plot training and validation loss\n",
        "plt.plot(history.history['loss'], label='Training Loss')\n",
        "plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Plot training and validation accuracy\n",
        "plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Evaluate the model on the test set\n",
        "test_loss, test_accuracy = model.evaluate(X_test_normalized, to_categorical(y_test))\n",
        "print(f'Test Loss: {test_loss}')\n",
        "print(f'Test Accuracy: {test_accuracy}')\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0498c9cf",
      "metadata": {
        "id": "0498c9cf",
        "outputId": "c65f3e45-eb6d-4e34-89b7-b1a8bf21cd90"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Cross-Validation Scores: [0.764397046759639, 0.7694831829368335, 0.7671862182116489, 0.7625922887612797, 0.7683347005742411]\n",
            "Average Score: 0.7663986874487285\n",
            "Standard Deviation: 0.0025447082487732686\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "from sklearn.model_selection import StratifiedKFold\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "\n",
        "\n",
        "X = df.drop('accident_severity', axis=1)\n",
        "y = df['accident_severity'].values  # Convert y to a NumPy array\n",
        "\n",
        "# Perform any necessary data preprocessing (e.g., scaling)\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# Create the neural network model\n",
        "model = MLPClassifier(hidden_layer_sizes=(16,), activation='relu', solver='adam', max_iter=1000)\n",
        "\n",
        "# Perform cross-validation\n",
        "cv = StratifiedKFold(n_splits=5)\n",
        "scores = []\n",
        "for train_index, test_index in cv.split(X_scaled, y):\n",
        "    X_train, X_test = X_scaled[train_index], X_scaled[test_index]\n",
        "    y_train, y_test = y[train_index], y[test_index]  # Use y as a NumPy array\n",
        "    model.fit(X_train, y_train)\n",
        "    score = model.score(X_test, y_test)\n",
        "    scores.append(score)\n",
        "\n",
        "# Print cross-validation scores\n",
        "print(\"Cross-Validation Scores:\", scores)\n",
        "print(\"Average Score:\", np.mean(scores))\n",
        "print(\"Standard Deviation:\", np.std(scores))\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "84e65efe",
      "metadata": {
        "id": "84e65efe"
      },
      "source": [
        "asta de jos e cu greseli sa i-l includ in scris cu ce am facut sa i-l schimb The warning message you see regarding convergence is a ConvergenceWarning indicating that the optimization algorithm used in the MLP classifier (stochastic optimizer with maximum iterations) hasn't converged within the maximum number of iterations (200) for some of the folds. This warning suggests that the model may not have reached the optimal solution for those folds. You can try increasing the maximum number of iterations using the max_iter parameter in the MLPClassifier to allow for more optimization iterations, or you can change the convergence criteria.\n",
        "\n",
        "Here's the updated code with the maximum number of iterations increased to 1000:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "070f9f06",
      "metadata": {
        "id": "070f9f06"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder, MinMaxScaler\n",
        "from sklearn.utils import resample\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ca0946b0",
      "metadata": {
        "id": "ca0946b0",
        "outputId": "538bf400-b038-4b96-e0a4-5f6006851471"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Accuracy: 0.7030352748154225\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-12 {color: black;background-color: white;}#sk-container-id-12 pre{padding: 0;}#sk-container-id-12 div.sk-toggleable {background-color: white;}#sk-container-id-12 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-12 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-12 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-12 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-12 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-12 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-12 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-12 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-12 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-12 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-12 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-12 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-12 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-12 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-12 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-12 div.sk-item {position: relative;z-index: 1;}#sk-container-id-12 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-12 div.sk-item::before, #sk-container-id-12 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-12 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-12 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-12 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-12 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-12 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-12 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-12 div.sk-label-container {text-align: center;}#sk-container-id-12 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-12 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-12\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" checked><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(random_state=42)</pre></div></div></div></div></div>"
            ],
            "text/plain": [
              "DecisionTreeClassifier(random_state=42)"
            ]
          },
          "execution_count": 482,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "\n",
        "clf = DecisionTreeClassifier(random_state=42)\n",
        "clf.fit(X_train, y_train)\n",
        "y_pred = clf.predict(X_test)\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "print(\"Accuracy:\", accuracy)\n",
        "clf.fit(X_train, y_train)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "a68192ec",
      "metadata": {
        "id": "a68192ec"
      },
      "source": [
        "SimpleImputer is a class provided by scikit-learn that helps with handling missing values in a dataset. It provides a simple strategy to replace missing values with a constant or the mean, median, or most frequent value of each column."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "89078f33",
      "metadata": {
        "id": "89078f33"
      },
      "outputs": [],
      "source": [
        "from sklearn.impute import SimpleImputer\n",
        "\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "X_encoded_imputed = imputer.fit_transform(X_encoded)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "25fe9ace",
      "metadata": {
        "id": "25fe9ace",
        "outputId": "62a5a279-a36b-4264-bfcf-542191e77425"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "X_encoded shape: (30475, 13)\n",
            "y shape: (30475,)\n"
          ]
        }
      ],
      "source": [
        "print(\"X_encoded shape:\", X_encoded.shape)\n",
        "print(\"y shape:\", y.shape)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "37a59e58",
      "metadata": {
        "id": "37a59e58"
      },
      "source": [
        "random forest model."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f45da124",
      "metadata": {
        "id": "f45da124",
        "outputId": "d237799d-a314-4d8b-c65a-56590eba13a0"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Training set score: 0.9241591468416736\n"
          ]
        }
      ],
      "source": [
        "from sklearn.ensemble import RandomForestClassifier\n",
        "rf = RandomForestClassifier()\n",
        "rf.fit(X_train, y_train)\n",
        "score = rf.score(X_train, y_train)\n",
        "print(\"Training set score:\", score)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7d91603b",
      "metadata": {
        "id": "7d91603b"
      },
      "outputs": [],
      "source": [
        "\n",
        "from sklearn.feature_selection import SelectKBest\n",
        "from sklearn.preprocessing import LabelEncoder, OrdinalEncoder\n",
        "from sklearn.feature_selection import chi2\n",
        "from sklearn.feature_selection import mutual_info_classif\n",
        "from sklearn.decomposition import PCA\n",
        "from imblearn.over_sampling import SMOTENC\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.ensemble import GradientBoostingClassifier\n",
        "from sklearn.metrics import confusion_matrix, classification_report, f1_score\n",
        "import joblib\n",
        "import shap\n",
        "from PIL import Image\n",
        "import PIL"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d4102aa6",
      "metadata": {
        "id": "d4102aa6"
      },
      "outputs": [],
      "source": [
        "n_df=df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c1933410",
      "metadata": {
        "id": "c1933410",
        "outputId": "fd3e7402-9dd0-4b4e-def0-01c5f6d57557"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "11"
            ]
          },
          "execution_count": 488,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "features = ['light_conditions', 'weather_conditions', 'road_surface_conditions', 'vehicle_type',\n",
        "                       'junction_location', 'skidding_and_overturning', 'vehicle_leaving_carriageway',\n",
        "                       'hit_object_off_carriageway', 'first_point_of_impact','sex_of_driver','accident_severity' ]\n",
        "len(features)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2eb56440",
      "metadata": {
        "id": "2eb56440"
      },
      "outputs": [],
      "source": [
        "# new dataframe generated\n",
        "featureset_df = n_df[features]\n",
        "target = n_df['accident_severity']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "885435bb",
      "metadata": {
        "id": "885435bb",
        "outputId": "ced256a6-86b4-4735-86c2-cbdc423892da"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 30475 entries, 0 to 30474\n",
            "Data columns (total 11 columns):\n",
            " #   Column                       Non-Null Count  Dtype  \n",
            "---  ------                       --------------  -----  \n",
            " 0   light_conditions             30475 non-null  float64\n",
            " 1   weather_conditions           30475 non-null  float64\n",
            " 2   road_surface_conditions      30475 non-null  float64\n",
            " 3   vehicle_type                 30475 non-null  float64\n",
            " 4   junction_location            30475 non-null  float64\n",
            " 5   skidding_and_overturning     30475 non-null  float64\n",
            " 6   vehicle_leaving_carriageway  30475 non-null  float64\n",
            " 7   hit_object_off_carriageway   30475 non-null  float64\n",
            " 8   first_point_of_impact        30475 non-null  float64\n",
            " 9   sex_of_driver                30475 non-null  float64\n",
            " 10  accident_severity            30475 non-null  float64\n",
            "dtypes: float64(11)\n",
            "memory usage: 2.6 MB\n"
          ]
        }
      ],
      "source": [
        "# meta data of the new sub dataset\n",
        "featureset_df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dc63ef1d",
      "metadata": {
        "id": "dc63ef1d"
      },
      "outputs": [],
      "source": [
        "feature_df = featureset_df.copy()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "dd48b5d9",
      "metadata": {
        "id": "dd48b5d9"
      },
      "outputs": [],
      "source": [
        "# NaN are missing because service info might not be available, we will fill as 'Unknowns'\n",
        "feature_df['light_conditions'] = feature_df['light_conditions'].fillna('Unknown')\n",
        "feature_df['weather_conditions'] = feature_df['weather_conditions'].fillna('Unknown')\n",
        "feature_df['road_surface_conditions'] = feature_df['road_surface_conditions'].fillna('Unknown')\n",
        "feature_df['vehicle_type'] = feature_df['vehicle_type'].fillna('unknown')\n",
        "feature_df['junction_location'] = feature_df['junction_location'].fillna('Other')\n",
        "feature_df['skidding_and_overturning'] = feature_df['skidding_and_overturning'].fillna('Unknown')\n",
        "feature_df['vehicle_leaving_carriageway'] = feature_df['vehicle_leaving_carriageway'].fillna('Unknown')\n",
        "feature_df['hit_object_off_carriageway'] = feature_df['hit_object_off_carriageway'].fillna('Unknown')\n",
        "feature_df['first_point_of_impact'] = feature_df['first_point_of_impact'].fillna('Unknown')\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c8c8afbe",
      "metadata": {
        "id": "c8c8afbe",
        "outputId": "aa7b0884-8dfd-4caa-8dd8-3e51e9030fc3"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>light_conditions</th>\n",
              "      <th>weather_conditions</th>\n",
              "      <th>road_surface_conditions</th>\n",
              "      <th>vehicle_type</th>\n",
              "      <th>junction_location</th>\n",
              "      <th>skidding_and_overturning</th>\n",
              "      <th>vehicle_leaving_carriageway</th>\n",
              "      <th>hit_object_off_carriageway</th>\n",
              "      <th>first_point_of_impact</th>\n",
              "      <th>sex_of_driver</th>\n",
              "      <th>accident_severity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30470</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30471</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30472</th>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30473</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30474</th>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>30475 rows × 11 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       light_conditions  weather_conditions  road_surface_conditions  \\\n",
              "0                   0.0                 3.0                      4.0   \n",
              "1                   0.0                 1.0                      1.0   \n",
              "2                   1.0                 1.0                      1.0   \n",
              "3                   1.0                 1.0                      1.0   \n",
              "4                   1.0                 1.0                      1.0   \n",
              "...                 ...                 ...                      ...   \n",
              "30470               0.0                 1.0                      4.0   \n",
              "30471               1.0                 1.0                      1.0   \n",
              "30472               1.0                 1.0                      1.0   \n",
              "30473               0.0                 1.0                      4.0   \n",
              "30474               0.0                 1.0                      1.0   \n",
              "\n",
              "       vehicle_type  junction_location  skidding_and_overturning  \\\n",
              "0               1.0                0.0                       2.0   \n",
              "1               4.0                0.0                       2.0   \n",
              "2               4.0                0.0                       2.0   \n",
              "3               4.0                2.0                       2.0   \n",
              "4               4.0                2.0                       2.0   \n",
              "...             ...                ...                       ...   \n",
              "30470           0.0                2.0                       2.0   \n",
              "30471           5.0                0.0                       0.0   \n",
              "30472           1.0                2.0                       2.0   \n",
              "30473           4.0                2.0                       2.0   \n",
              "30474           0.0                1.0                       1.0   \n",
              "\n",
              "       vehicle_leaving_carriageway  hit_object_off_carriageway  \\\n",
              "0                              2.0                         2.0   \n",
              "1                              0.0                         0.0   \n",
              "2                              2.0                         2.0   \n",
              "3                              2.0                         2.0   \n",
              "4                              2.0                         2.0   \n",
              "...                            ...                         ...   \n",
              "30470                          2.0                         2.0   \n",
              "30471                          2.0                         2.0   \n",
              "30472                          2.0                         2.0   \n",
              "30473                          2.0                         2.0   \n",
              "30474                          1.0                         1.0   \n",
              "\n",
              "       first_point_of_impact  sex_of_driver  accident_severity  \n",
              "0                        3.0            1.0                1.0  \n",
              "1                        0.0            1.0                0.0  \n",
              "2                        0.0            2.0                1.0  \n",
              "3                        0.0            3.0                1.0  \n",
              "4                        0.0            0.0                2.0  \n",
              "...                      ...            ...                ...  \n",
              "30470                    0.0            1.0                1.0  \n",
              "30471                    3.0            1.0                1.0  \n",
              "30472                    0.0            1.0                2.0  \n",
              "30473                    3.0            1.0                0.0  \n",
              "30474                    1.0            2.0                0.0  \n",
              "\n",
              "[30475 rows x 11 columns]"
            ]
          },
          "execution_count": 493,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "feature_df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6c493e18",
      "metadata": {
        "id": "6c493e18",
        "outputId": "51924b7b-dcb8-47bb-95d3-11ac14d968db"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 30475 entries, 0 to 30474\n",
            "Data columns (total 11 columns):\n",
            " #   Column                       Non-Null Count  Dtype  \n",
            "---  ------                       --------------  -----  \n",
            " 0   light_conditions             30475 non-null  float64\n",
            " 1   weather_conditions           30475 non-null  float64\n",
            " 2   road_surface_conditions      30475 non-null  float64\n",
            " 3   vehicle_type                 30475 non-null  float64\n",
            " 4   junction_location            30475 non-null  float64\n",
            " 5   skidding_and_overturning     30475 non-null  float64\n",
            " 6   vehicle_leaving_carriageway  30475 non-null  float64\n",
            " 7   hit_object_off_carriageway   30475 non-null  float64\n",
            " 8   first_point_of_impact        30475 non-null  float64\n",
            " 9   sex_of_driver                30475 non-null  float64\n",
            " 10  accident_severity            30475 non-null  float64\n",
            "dtypes: float64(11)\n",
            "memory usage: 2.6 MB\n"
          ]
        }
      ],
      "source": [
        "feature_df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9ababd49",
      "metadata": {
        "id": "9ababd49"
      },
      "outputs": [],
      "source": [
        "X = feature_df[features]\n",
        "y = target"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "eb18660c",
      "metadata": {
        "id": "eb18660c",
        "outputId": "d3e13ecf-30d3-438a-8caf-eb8bd00a86bd"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(30475, 11)"
            ]
          },
          "execution_count": 496,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# we will use pandas get_dummies method for on-hot encoding\n",
        "encoded_df = pd.get_dummies(X, drop_first=True)\n",
        "encoded_df.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6f8f6858",
      "metadata": {
        "id": "6f8f6858",
        "outputId": "da44473a-7663-446c-aa38-9eb9a43757a3"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Encoded labels: [0. 1. 2.]\n"
          ]
        }
      ],
      "source": [
        "lb = LabelEncoder()\n",
        "lb.fit(y)\n",
        "y_encoded = lb.transform(y)\n",
        "print(\"Encoded labels:\",lb.classes_)\n",
        "y_en = pd.Series(y_encoded)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "25c87705",
      "metadata": {
        "id": "25c87705"
      },
      "outputs": [],
      "source": [
        "## mutual info classif to check informative features\n",
        "mi_calc = mutual_info_classif(encoded_df, y_en, random_state=42)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a9dbd32a",
      "metadata": {
        "id": "a9dbd32a",
        "outputId": "e782c557-88dc-4f8c-e93b-c76431c29a6e"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Columns</th>\n",
              "      <th>MI_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>accident_severity</td>\n",
              "      <td>1.058337</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>vehicle_type</td>\n",
              "      <td>0.184473</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>light_conditions</td>\n",
              "      <td>0.084829</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>skidding_and_overturning</td>\n",
              "      <td>0.021444</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>vehicle_leaving_carriageway</td>\n",
              "      <td>0.020744</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>weather_conditions</td>\n",
              "      <td>0.018527</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>road_surface_conditions</td>\n",
              "      <td>0.016481</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>hit_object_off_carriageway</td>\n",
              "      <td>0.015969</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>sex_of_driver</td>\n",
              "      <td>0.012129</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>junction_location</td>\n",
              "      <td>0.011123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>first_point_of_impact</td>\n",
              "      <td>0.002520</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                        Columns  MI_score\n",
              "10            accident_severity  1.058337\n",
              "3                  vehicle_type  0.184473\n",
              "0              light_conditions  0.084829\n",
              "5      skidding_and_overturning  0.021444\n",
              "6   vehicle_leaving_carriageway  0.020744\n",
              "1            weather_conditions  0.018527\n",
              "2       road_surface_conditions  0.016481\n",
              "7    hit_object_off_carriageway  0.015969\n",
              "9                 sex_of_driver  0.012129\n",
              "4             junction_location  0.011123\n",
              "8         first_point_of_impact  0.002520"
            ]
          },
          "execution_count": 499,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "mi_df = pd.DataFrame({'Columns':encoded_df.columns, 'MI_score':mi_calc})\n",
        "mi_df.sort_values(by='MI_score',ascending=False).head(15)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3d5309b5",
      "metadata": {
        "id": "3d5309b5"
      },
      "outputs": [],
      "source": [
        "X_new = feature_df[features]\n",
        "cols = ['light_conditions', 'weather_conditions', 'road_surface_conditions', 'vehicle_type',\n",
        "                       'junction_location', 'skidding_and_overturning', 'vehicle_leaving_carriageway',\n",
        "                       'hit_object_off_carriageway', 'first_point_of_impact','sex_of_driver' ]\n",
        "\n",
        "# Create a new DataFrame\n",
        "fs_df = pd.DataFrame(X_new, columns=cols)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "7642acaf",
      "metadata": {
        "id": "7642acaf",
        "outputId": "5a01c517-398d-4eee-f7e2-d2d88ff8e488"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "NaN count in X_encoded: 0\n",
            "NaN count in y: 0\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x432 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.decomposition import PCA\n",
        "\n",
        "# Instantiate LabelEncoder\n",
        "label_encoder = LabelEncoder()\n",
        "\n",
        "# Encode the target variable\n",
        "df['accident_severity'] = label_encoder.fit_transform(df['accident_severity'])\n",
        "\n",
        "# Identify numerical and categorical features\n",
        "numerical_features = []\n",
        "categorical_features = []\n",
        "for column in df.columns:\n",
        "    if df[column].dtype in ['float64', 'int64']:\n",
        "        numerical_features.append(column)\n",
        "    elif df[column].dtype == 'object':\n",
        "        categorical_features.append(column)\n",
        "\n",
        "# Encode categorical features in X\n",
        "X_encoded = df.copy()\n",
        "for column in categorical_features:\n",
        "    X_encoded[column] = label_encoder.fit_transform(data[column])\n",
        "\n",
        "# Convert X_encoded to a DataFrame\n",
        "X_encoded_df = pd.DataFrame(X_encoded)\n",
        "\n",
        "# Check for NaN values in X_encoded\n",
        "nan_count_X = X_encoded_df.isnull().sum().sum()\n",
        "print(\"NaN count in X_encoded:\", nan_count_X)\n",
        "\n",
        "# Check for NaN values in y\n",
        "nan_count_y = df['accident_severity'].isnull().sum()\n",
        "print(\"NaN count in y:\", nan_count_y)\n",
        "\n",
        "# Perform dimensionality reduction using PCA\n",
        "pca = PCA(n_components=2)\n",
        "X_reduced = pca.fit_transform(X_encoded_df)\n",
        "\n",
        "# Create a scatter plot of the reduced data\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.scatter(X_reduced[:, 0], X_reduced[:, 1], c=df['accident_severity'], cmap='viridis', alpha=0.8)\n",
        "plt.xlabel('PC1')\n",
        "plt.ylabel('PC2')\n",
        "plt.title('Dimensionality Reduction using PCA')\n",
        "\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "52ee519b",
      "metadata": {
        "id": "52ee519b",
        "outputId": "d4f6f170-497b-48df-8b3a-941837023d86"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 576x432 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "# Separate the features (X) and the target variable (y)\n",
        "X = df.drop('accident_severity', axis=1)\n",
        "y = df['accident_severity']\n",
        "\n",
        "# Perform dimensionality reduction using PCA\n",
        "pca = PCA(n_components=2)\n",
        "X_reduced = pca.fit_transform(X)\n",
        "\n",
        "# Train a logistic regression model\n",
        "logreg = LogisticRegression()\n",
        "logreg.fit(X_reduced, y)\n",
        "\n",
        "# Create a scatter plot of the reduced data\n",
        "plt.figure(figsize=(8, 6))\n",
        "plt.scatter(X_reduced[:, 0], X_reduced[:, 1], c=y, cmap='viridis', alpha=0.8)\n",
        "plt.xlabel('PC1')\n",
        "plt.ylabel('PC2')\n",
        "plt.title('Logistic Regression Dimensionality Reduction')\n",
        "plt.colorbar(label='Target Variable')\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4a689b12",
      "metadata": {
        "id": "4a689b12"
      },
      "source": [
        "PCA stands for Principal Component Analysis. It is a popular technique used in data analysis and dimensionality reduction. PCA helps to identify patterns and relationships in high-dimensional data by transforming it into a new set of variables called principal components."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8fd62ebc",
      "metadata": {
        "id": "8fd62ebc",
        "outputId": "b1a9b68b-ad0e-4735-e74c-51695a74b312"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style>#sk-container-id-13 {color: black;background-color: white;}#sk-container-id-13 pre{padding: 0;}#sk-container-id-13 div.sk-toggleable {background-color: white;}#sk-container-id-13 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-13 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-13 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-13 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-13 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-13 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-13 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-13 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-13 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-13 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-13 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-13 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-13 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-13 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-13 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-13 div.sk-item {position: relative;z-index: 1;}#sk-container-id-13 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-13 div.sk-item::before, #sk-container-id-13 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-13 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-13 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-13 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-13 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-13 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-13 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-13 div.sk-label-container {text-align: center;}#sk-container-id-13 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-13 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-13\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>PCA(n_components=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" checked><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">PCA</label><div class=\"sk-toggleable__content\"><pre>PCA(n_components=3)</pre></div></div></div></div></div>"
            ],
            "text/plain": [
              "PCA(n_components=3)"
            ]
          },
          "execution_count": 503,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pca = PCA(n_components=3)\n",
        "pca.fit(encoded_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ab2bc0cc",
      "metadata": {
        "id": "ab2bc0cc"
      },
      "outputs": [],
      "source": [
        "X_pca = pca.transform(encoded_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8fe1b5d9",
      "metadata": {
        "id": "8fe1b5d9"
      },
      "outputs": [],
      "source": [
        "components = pca.components_"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "32a2db21",
      "metadata": {
        "id": "32a2db21"
      },
      "outputs": [],
      "source": [
        "pca_df = pd.DataFrame(X_pca, columns=['PC1','PC2','PC3'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "37e8fe54",
      "metadata": {
        "id": "37e8fe54",
        "outputId": "1a8d07a8-c8a3-441b-fe40-ef51e230c1f2"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "PC1    3.440009\n",
              "PC2    2.137671\n",
              "PC3    1.511677\n",
              "dtype: float64"
            ]
          },
          "execution_count": 507,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pca_df.var()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "54f96d55",
      "metadata": {
        "id": "54f96d55"
      },
      "source": [
        "PC1: This principal component is predominantly influenced by Variable1, as it has the highest coefficient (3.437962). The other variables, Variable2 and Variable3, may also contribute to a lesser extent. PC1 captures the most significant source of variance in the dataset and represents the direction of maximum variability.\n",
        "\n",
        "PC2: The second principal component, PC2, is primarily influenced by Variable2, as it has the highest coefficient (2.117136). Variable1 and Variable3 may also have a smaller influence on this component.\n",
        "\n",
        "PC3: The third principal component, PC3, is most strongly associated with Variable3, with a coefficient of 1.509987. Variable1 and Variable2 may have a smaller influence on this component.\n",
        "\n",
        "It's important to note that the interpretation of the principal components depends on the context and the specific variables in dataset. The coefficients indicate the relative importance of each variable in determining the values of the principal components."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2a5ce7e0",
      "metadata": {
        "id": "2a5ce7e0"
      },
      "source": [
        "The code applies the RandomOverSampler to the dataset and target variable, resulting in an oversampled dataset with a balanced representation of the classes. This technique helps mitigate the effects of class imbalance and can improve the performance of machine learning models, particularly when dealing with imbalanced datasets."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ef3617cc",
      "metadata": {
        "id": "ef3617cc",
        "outputId": "839b90bb-fd9b-4032-bb1c-d75b5f856f51"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Oversampled dataset shape: (38073, 10)\n",
            "Oversampled target variable shape: (38073,)\n"
          ]
        }
      ],
      "source": [
        "from imblearn.over_sampling import RandomOverSampler\n",
        "\n",
        "ros = RandomOverSampler(random_state=42)\n",
        "X_n, y_n = ros.fit_resample(fs_df, y_en)\n",
        "\n",
        "print(\"Oversampled dataset shape:\", X_n.shape)\n",
        "print(\"Oversampled target variable shape:\", y_n.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5fff0c06",
      "metadata": {
        "id": "5fff0c06"
      },
      "source": [
        "The output shows that after oversampling, each class in the target variable has an equal number of instances, resulting in a balanced dataset. This balanced representation is beneficial when training machine learning models, as it can help prevent the model from being biased towards the majority class and improve the model's ability to learn patterns and make accurate predictions for all classes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2db5be7f",
      "metadata": {
        "id": "2db5be7f",
        "outputId": "5a49d387-d38a-4109-9a2a-d2fde9e12924"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "1    12691\n",
              "0    12691\n",
              "2    12691\n",
              "dtype: int64"
            ]
          },
          "execution_count": 509,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "y_n.value_counts()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5b5bef45",
      "metadata": {
        "id": "5b5bef45"
      },
      "source": [
        "By performing the train-test split and training a baseline Random Forest model, you have created a foundation for evaluating the model's performance and assessing its predictive capabilities. The predicted values can be further analyzed and compared against the true labels (y_tst) to evaluate the model's accuracy or other performance metrics."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "113bc3ff",
      "metadata": {
        "id": "113bc3ff"
      },
      "outputs": [],
      "source": [
        "# train and test split and building baseline model to predict target features\n",
        "X_trn, X_tst, y_trn, y_tst = train_test_split(X_n, y_n, test_size=0.2, random_state=42)\n",
        "\n",
        "# modelling using random forest baseline\n",
        "rf = RandomForestClassifier(n_estimators=800, max_depth=20, random_state=42)\n",
        "rf.fit(X_trn, y_trn)\n",
        "# predicting on test data\n",
        "predics = rf.predict(X_tst)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0e93c845",
      "metadata": {
        "id": "0e93c845"
      },
      "source": [
        "The training score provides an indication of how well the model fits the training data. However, it is important to note that the training score alone may not be sufficient to assess the model's performance."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "44fbb08a",
      "metadata": {
        "id": "44fbb08a",
        "outputId": "1499b019-58d6-48ca-9766-f0e26ec720ab"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.7619344671350713"
            ]
          },
          "execution_count": 511,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# train score\n",
        "rf.score(X_trn, y_trn)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "977dd5b5",
      "metadata": {
        "id": "977dd5b5"
      },
      "source": [
        "Interpreting the classification report:\n",
        "\n",
        "Precision: Precision measures the proportion of correctly predicted instances of a particular class out of all instances predicted as that class. Higher precision indicates fewer false positives. In this case, the precision for Class 0 is 0.72, Class 1 is 0.79, and Class 2 is 0.68.\n",
        "\n",
        "Recall: Recall, also known as sensitivity or true positive rate, measures the proportion of correctly predicted instances of a particular class out of all instances belonging to that class. Higher recall indicates fewer false negatives. In this case, the recall for Class 0 is 0.73, Class 1 is 0.72, and Class 2 is 0.74.\n",
        "\n",
        "F1-score: The F1-score is the harmonic mean of precision and recall and provides a balanced measure of a model's performance. It combines precision and recall into a single metric. In this case, the F1-score for Class 0 is 0.73, Class 1 is 0.75, and Class 2 is 0.71.\n",
        "\n",
        "Support: Support represents the number of instances in each class in the test set. In this case, Class 0 has 2,565 instances, Class 1 has 2,599 instances, and Class 2 has 2,451 instances.\n",
        "\n",
        "Accuracy: The overall accuracy of the model on the test set is 0.73, which means it correctly predicted the target variable for approximately 73% of the instances in the test set.\n",
        "\n",
        "Macro Avg: The macro average calculates the average performance across all classes, giving equal weight to each class. In this case, the macro average precision, recall, and F1-score are all approximately 0.73.\n",
        "\n",
        "Weighted Avg: The weighted average calculates the average performance across all classes, considering the support (number of instances) of each class. In this case, the weighted average precision, recall, and F1-score are all approximately 0.73, as they are the same as the macro average due to balanced class support."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "1449ad97",
      "metadata": {
        "id": "1449ad97"
      },
      "source": [
        "Overall, the classification report provides a comprehensive overview of the model's performance for each class and overall on the test set. It gives insights into the precision, recall, and F1-score for each class, allowing to assess the model's performance in predicting each class accurately."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cb86bf86",
      "metadata": {
        "id": "cb86bf86",
        "outputId": "e51c4cfb-dfb3-481e-9fc8-9a9b763a8d1e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.72      0.73      0.73      2565\n",
            "           1       0.79      0.72      0.75      2599\n",
            "           2       0.68      0.74      0.71      2451\n",
            "\n",
            "    accuracy                           0.73      7615\n",
            "   macro avg       0.73      0.73      0.73      7615\n",
            "weighted avg       0.73      0.73      0.73      7615\n",
            "\n"
          ]
        }
      ],
      "source": [
        "classif_re = classification_report(y_tst,predics)\n",
        "print(classif_re)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "6f6a0d96",
      "metadata": {
        "id": "6f6a0d96"
      },
      "source": [
        "The confusion matrix is displayed as a two-dimensional array, with the true labels represented by rows and the anticipated labels by columns. The array's values stand in for instance counts.Interpreting the confusion matrix's individual values\n",
        "\n",
        "True Positives (TP): The model accurately foresaw the instances that fall under the relevant class. For instance, the model accurately predicted 1,878 occurrences of Class 0, 1,865 instances of Class 1, and 1,805 instances of Class 2, for which the data were collected.\n",
        "\n",
        "False Positives (FP) are predictions made by the model that indicate instances genuinely belong to a different class when they actually do not. For instance, the model predicted 173 cases as belonging to Class 0 whereas in fact they belonged to other classes. Similar to that, it misidentified 394 cases as Class 1 and\n",
        "\n",
        "False Negatives (FN): The model incorrectly predicted instances as belonging to other classes when they actually belong to the corresponding class. For example, the model missed 514 instances of Class 0, 340 instances of Class 1, and 317 instances of Class 2.\n",
        "\n",
        "The model's performance for each class is broken down in detail by the confusion matrix, which also highlights the model's accurate and inaccurate predictions. This data is helpful in assessing the model's performance, locating any biases or imbalances, and possibly modifying the model or trying out new strategies to enhance predictions.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "088994b7",
      "metadata": {
        "id": "088994b7",
        "outputId": "b445ecb2-78be-4841-ccf9-688ba6380cb9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[1878,  173,  514],\n",
              "       [ 394, 1865,  340],\n",
              "       [ 329,  317, 1805]], dtype=int64)"
            ]
          },
          "execution_count": 513,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "conf_matrix = confusion_matrix(y_tst, predics)\n",
        "conf_matrix"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e6c953be",
      "metadata": {
        "id": "e6c953be"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "71784805",
      "metadata": {
        "id": "71784805"
      },
      "source": [
        "The rows represent the actual classes, while the columns represent the predicted classes. The value at (1339 , 0) (top-left corner) represents the number of instances where the actual class was 0 and the model predicted it correctly as 0. The diagonal elements (top-left to bottom-right) represent the correctly classified instances, while off-diagonal elements represent misclassifications. In this case, we can see that the model has correctly predicted class 0 in 1339 instances, class 1 in 1354 instances, and class 2 in 1407 instances. It has made some misclassifications as well, as shown in the off-diagonal elements.\n",
        "Overall, a weighted average F1-score of 0.7293 suggests that the model has performed reasonably well on the test set, providing a balanced trade-off between precision and recall across multiple classes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fa02ca1f",
      "metadata": {
        "id": "fa02ca1f",
        "outputId": "baf9ec19-3129-4309-bdd1-fdf8765d4222"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0.729257827039213\n"
          ]
        }
      ],
      "source": [
        "f1score = f1_score(y_tst,predics, average='weighted')\n",
        "print(f1score)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "96f90caa",
      "metadata": {
        "id": "96f90caa"
      },
      "source": [
        "These scores can be used to compare different models or variations of the same model and aid in selecting the best model for the given dataset."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2d14d8cb",
      "metadata": {
        "id": "2d14d8cb",
        "outputId": "ef8f3808-83d5-4366-a266-30dcfc559183"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Cross-validation scores: [0.71517637 0.72534865 0.71763741 0.711895   0.72173913]\n",
            "Mean cross-validation score: 0.7183593109105825\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "from sklearn.model_selection import cross_val_score, KFold\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Load your dataset and split it into features (X) and target variable (y)\n",
        "# X = ...\n",
        "# y = ...\n",
        "\n",
        "# Initialize your classifier\n",
        "classifier = LogisticRegression(max_iter=1000)\n",
        "\n",
        "# Define the number of folds for cross-validation\n",
        "n_folds = 5\n",
        "\n",
        "# Perform cross-validation\n",
        "kf = KFold(n_splits=n_folds, shuffle=True, random_state=42)\n",
        "\n",
        "# Scale the data using StandardScaler\n",
        "scaler = StandardScaler()\n",
        "X_scaled = scaler.fit_transform(X)\n",
        "\n",
        "# Calculate cross-validation scores\n",
        "scores = cross_val_score(classifier, X_scaled, y, cv=kf)\n",
        "\n",
        "# Print the cross-validation scores\n",
        "print(\"Cross-validation scores:\", scores)\n",
        "\n",
        "# Calculate and print the mean cross-validation score\n",
        "mean_score = np.mean(scores)\n",
        "print(\"Mean cross-validation score:\", mean_score)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "5d00b4b0",
      "metadata": {
        "id": "5d00b4b0"
      },
      "source": [
        "Shows how to conduct a grid search cross-validation to determine the ideal Random Forest Classifier model parameters. The parameter grid (param_grid) is used to conduct the grid search, and the results are assessed based on the best score."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "117db706",
      "metadata": {
        "id": "117db706",
        "outputId": "563c211f-6841-4d28-b8ab-047ea4f80f9a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Best Parameters:  {'max_depth': 10, 'min_samples_split': 2, 'n_estimators': 300}\n",
            "Best Score:  0.7328451242821583\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "# Define the parameter grid\n",
        "param_grid = {\n",
        "    'n_estimators': [100, 200, 300],\n",
        "    'max_depth': [None, 5, 10],\n",
        "    'min_samples_split': [2, 5, 10]\n",
        "}\n",
        "\n",
        "# Create the RandomForestClassifier model\n",
        "rf = RandomForestClassifier(random_state=42)\n",
        "\n",
        "# Perform grid search cross-validation\n",
        "grid_search = GridSearchCV(rf, param_grid, cv=5)\n",
        "grid_search.fit(X_trn, y_trn)\n",
        "\n",
        "# Print the best parameters and best score\n",
        "print(\"Best Parameters: \", grid_search.best_params_)\n",
        "print(\"Best Score: \", grid_search.best_score_)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d86dbfaa",
      "metadata": {
        "id": "d86dbfaa",
        "outputId": "3dbe9fe3-1ec0-4df4-ba76-8c948c9cc633"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0.3.0\n",
            "1.2.0\n"
          ]
        }
      ],
      "source": [
        "import pdpbox\n",
        "import sklearn\n",
        "\n",
        "print(pdpbox.__version__)\n",
        "print(sklearn.__version__)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "80a7944b",
      "metadata": {
        "id": "80a7944b",
        "outputId": "ca7551a7-6f37-43c7-c694-7de75298d191"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Random Forest Cross-Validation Scores: [0.75 0.45 0.65 0.5  0.55]\n",
            "Random Forest Average Cross-Validation Score: 0.5800000000000001\n",
            "Random Forest Evaluation Metrics:\n",
            "Accuracy: 1.0\n",
            "Precision: 1.0\n",
            "Recall: 1.0\n",
            "F1-Score: 1.0\n",
            "\n",
            "SVM Cross-Validation Scores: [0.55 0.7  0.4  0.5  0.3 ]\n",
            "SVM Average Cross-Validation Score: 0.48999999999999994\n",
            "SVM Evaluation Metrics:\n",
            "Accuracy: 0.61\n",
            "Precision: 0.6243781094527363\n",
            "Recall: 0.61\n",
            "F1-Score: 0.5983935742971888\n",
            "\n",
            "Logistic Regression Cross-Validation Scores: [0.5  0.7  0.65 0.55 0.3 ]\n",
            "Logistic Regression Average Cross-Validation Score: 0.54\n",
            "Logistic Regression Evaluation Metrics:\n",
            "Accuracy: 0.56\n",
            "Precision: 0.56\n",
            "Recall: 0.56\n",
            "F1-Score: 0.56\n",
            "\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "# Define the models to compare\n",
        "models = [\n",
        "    ('Random Forest', RandomForestClassifier()),\n",
        "    ('SVM', SVC()),\n",
        "    ('Logistic Regression', LogisticRegression())\n",
        "]\n",
        "\n",
        "# Iterate over the models\n",
        "for model_name, model in models:\n",
        "    # Perform cross-validation\n",
        "    scores = cross_val_score(model, X, y, cv=5)\n",
        "\n",
        "    # Print the cross-validation scores\n",
        "    print(f\"{model_name} Cross-Validation Scores: {scores}\")\n",
        "    print(f\"{model_name} Average Cross-Validation Score: {scores.mean()}\")\n",
        "\n",
        "    # Fit the model on the entire data\n",
        "    model.fit(X, y)\n",
        "\n",
        "    # Make predictions\n",
        "    y_pred = model.predict(X)\n",
        "\n",
        "    # Evaluate the model using various metrics\n",
        "    accuracy = accuracy_score(y, y_pred)\n",
        "    precision = precision_score(y, y_pred, average='weighted')\n",
        "    recall = recall_score(y, y_pred, average='weighted')\n",
        "    f1 = f1_score(y, y_pred, average='weighted')\n",
        "\n",
        "    # Print the evaluation metrics\n",
        "    print(f\"{model_name} Evaluation Metrics:\")\n",
        "    print(f\"Accuracy: {accuracy}\")\n",
        "    print(f\"Precision: {precision}\")\n",
        "    print(f\"Recall: {recall}\")\n",
        "    print(f\"F1-Score: {f1}\")\n",
        "    print()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "4ea03c8a",
      "metadata": {
        "id": "4ea03c8a"
      },
      "source": [
        "In conclusion, the Random Forest and SVM models outperform the Logistic Regression model in terms of overall performance. Both the Random Forest and SVM models have balanced evaluation metrics and cross-validation scores that are relatively higher."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "749d327b",
      "metadata": {
        "id": "749d327b",
        "outputId": "76f80b83-a5ff-4663-fa6c-5b6e5070dc16"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                                   Cross-Val Score  Average Score  Accuracy  \\\n",
            "Classifier                                                                    \n",
            "Random Forest        [0.75, 0.45, 0.65, 0.5, 0.55]           0.58      1.00   \n",
            "SVM                     [0.55, 0.7, 0.4, 0.5, 0.3]           0.49      0.61   \n",
            "Logistic Regression    [0.5, 0.7, 0.65, 0.55, 0.3]           0.54      0.56   \n",
            "\n",
            "                     Precision  Recall  F1-Score  \n",
            "Classifier                                        \n",
            "Random Forest         1.000000    1.00  1.000000  \n",
            "SVM                   0.624378    0.61  0.598394  \n",
            "Logistic Regression   0.560000    0.56  0.560000  \n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Create a DataFrame to store the evaluation metrics\n",
        "data = {\n",
        "    'Classifier': ['Random Forest', 'SVM', 'Logistic Regression'],\n",
        "    'Cross-Val Score': [[0.75, 0.45, 0.65, 0.5, 0.55], [0.55, 0.7, 0.4, 0.5, 0.3], [0.5, 0.7, 0.65, 0.55, 0.3]],\n",
        "    'Average Score': [0.58, 0.49, 0.54],\n",
        "    'Accuracy': [1.0, 0.61, 0.56],\n",
        "    'Precision': [1.0, 0.6243781094527363, 0.56],\n",
        "    'Recall': [1.0, 0.61, 0.56],\n",
        "    'F1-Score': [1.0, 0.5983935742971888, 0.56]\n",
        "}\n",
        "\n",
        "# Create the DataFrame\n",
        "results = pd.DataFrame(data)\n",
        "\n",
        "# Set the 'Classifier' column as the index\n",
        "results.set_index('Classifier', inplace=True)\n",
        "\n",
        "# Print the DataFrame\n",
        "print(results)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8b8d901a",
      "metadata": {
        "id": "8b8d901a",
        "outputId": "a338fe77-678a-4248-81d7-c8e008343236"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "\n",
        "# Generate sample data\n",
        "np.random.seed(0)\n",
        "n_samples = 100\n",
        "X = np.random.randn(n_samples, 2)\n",
        "y = np.random.randint(0, 2, size=n_samples)\n",
        "\n",
        "# Train logistic regression model\n",
        "model = LogisticRegression()\n",
        "model.fit(X, y)\n",
        "\n",
        "# Create a meshgrid of points to evaluate the model on\n",
        "x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\n",
        "y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\n",
        "xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.1),\n",
        "                     np.arange(y_min, y_max, 0.1))\n",
        "\n",
        "# Make predictions on the meshgrid points\n",
        "Z = model.predict(np.c_[xx.ravel(), yy.ravel()])\n",
        "Z = Z.reshape(xx.shape)\n",
        "\n",
        "# Plot the decision boundary\n",
        "plt.figure()\n",
        "plt.contourf(xx, yy, Z, alpha=0.8)\n",
        "\n",
        "# Plot the training samples\n",
        "scatter = plt.scatter(X[:, 0], X[:, 1], c=y, edgecolors='k')\n",
        "\n",
        "# Add legend\n",
        "classes = ['Class 0', 'Class 1']\n",
        "plt.legend(handles=scatter.legend_elements()[0], labels=classes)\n",
        "\n",
        "plt.xlabel('Feature 1')\n",
        "plt.ylabel('Feature 2')\n",
        "plt.title('Logistic Regression Decision Boundary')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a278699e",
      "metadata": {
        "id": "a278699e",
        "outputId": "be701f82-64ff-4561-e3c4-1eab4fcf4e49"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<style type=\"text/css\">\n",
              "</style>\n",
              "<table id=\"T_6ab0a\">\n",
              "  <caption>Confusion Matrix</caption>\n",
              "  <thead>\n",
              "    <tr>\n",
              "      <th class=\"blank level0\" >&nbsp;</th>\n",
              "      <th id=\"T_6ab0a_level0_col0\" class=\"col_heading level0 col0\" >Predicted 0</th>\n",
              "      <th id=\"T_6ab0a_level0_col1\" class=\"col_heading level0 col1\" >Predicted 1</th>\n",
              "      <th id=\"T_6ab0a_level0_col2\" class=\"col_heading level0 col2\" >Predicted 2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th id=\"T_6ab0a_level0_row0\" class=\"row_heading level0 row0\" >Actual 0</th>\n",
              "      <td id=\"T_6ab0a_row0_col0\" class=\"data row0 col0\" >1339</td>\n",
              "      <td id=\"T_6ab0a_row0_col1\" class=\"data row0 col1\" >160</td>\n",
              "      <td id=\"T_6ab0a_row0_col2\" class=\"data row0 col2\" >344</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_6ab0a_level0_row1\" class=\"row_heading level0 row1\" >Actual 1</th>\n",
              "      <td id=\"T_6ab0a_row1_col0\" class=\"data row1 col0\" >336</td>\n",
              "      <td id=\"T_6ab0a_row1_col1\" class=\"data row1 col1\" >1354</td>\n",
              "      <td id=\"T_6ab0a_row1_col2\" class=\"data row1 col2\" >271</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th id=\"T_6ab0a_level0_row2\" class=\"row_heading level0 row2\" >Actual 2</th>\n",
              "      <td id=\"T_6ab0a_row2_col0\" class=\"data row2 col0\" >296</td>\n",
              "      <td id=\"T_6ab0a_row2_col1\" class=\"data row2 col1\" >229</td>\n",
              "      <td id=\"T_6ab0a_row2_col2\" class=\"data row2 col2\" >1407</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n"
            ],
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x1ef3e6f3bb0>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Random Forest Cross-Validation Scores: [0.75 0.5  0.65 0.35 0.55]\n",
            "Random Forest Average Cross-Validation Score: 0.5599999999999999\n",
            "Random Forest Evaluation Metrics:\n",
            "Accuracy: 1.0\n",
            "Precision: 1.0\n",
            "Recall: 1.0\n",
            "F1-Score: 1.0\n",
            "\n",
            "SVM Cross-Validation Scores: [0.55 0.7  0.4  0.5  0.3 ]\n",
            "SVM Average Cross-Validation Score: 0.48999999999999994\n",
            "SVM Evaluation Metrics:\n",
            "Accuracy: 0.61\n",
            "Precision: 0.6243781094527363\n",
            "Recall: 0.61\n",
            "F1-Score: 0.5983935742971888\n",
            "\n",
            "Logistic Regression Cross-Validation Scores: [0.5  0.7  0.65 0.55 0.3 ]\n",
            "Logistic Regression Average Cross-Validation Score: 0.54\n",
            "Logistic Regression Evaluation Metrics:\n",
            "Accuracy: 0.56\n",
            "Precision: 0.56\n",
            "Recall: 0.56\n",
            "F1-Score: 0.56\n",
            "\n"
          ]
        }
      ],
      "source": [
        "#import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "# Define the confusion matrix\n",
        "conf_matrix = np.array([[1339, 160, 344],\n",
        "                        [336, 1354, 271],\n",
        "                        [296, 229, 1407]])\n",
        "\n",
        "# Create a DataFrame from the confusion matrix\n",
        "df_confusion = pd.DataFrame(conf_matrix, index=['Actual 0', 'Actual 1', 'Actual 2'], columns=['Predicted 0', 'Predicted 1', 'Predicted 2'])\n",
        "\n",
        "# Set the title\n",
        "title = 'Confusion Matrix'\n",
        "\n",
        "# Add the caption to the DataFrame style\n",
        "styled_table = df_confusion.style.set_caption(title)\n",
        "\n",
        "# Display the styled table\n",
        "display(styled_table)\n",
        "\n",
        "# Define the models to compare\n",
        "models = [\n",
        "    ('Random Forest', RandomForestClassifier()),\n",
        "    ('SVM', SVC()),\n",
        "    ('Logistic Regression', LogisticRegression())\n",
        "]\n",
        "\n",
        "# Iterate over the models\n",
        "for model_name, model in models:\n",
        "    # Perform cross-validation\n",
        "    scores = cross_val_score(model, X, y, cv=5)\n",
        "\n",
        "    # Print the cross-validation scores\n",
        "    print(f\"{model_name} Cross-Validation Scores: {scores}\")\n",
        "    print(f\"{model_name} Average Cross-Validation Score: {scores.mean()}\")\n",
        "\n",
        "    # Fit the model on the entire data\n",
        "    model.fit(X, y)\n",
        "\n",
        "    # Make predictions\n",
        "    y_pred = model.predict(X)\n",
        "\n",
        "    # Evaluate the model using various metrics\n",
        "    accuracy = accuracy_score(y, y_pred)\n",
        "    precision = precision_score(y, y_pred, average='weighted')\n",
        "    recall = recall_score(y, y_pred, average='weighted')\n",
        "    f1 = f1_score(y, y_pred, average='weighted')\n",
        "\n",
        "    # Print the evaluation metrics\n",
        "    print(f\"{model_name} Evaluation Metrics:\")\n",
        "    print(f\"Accuracy: {accuracy}\")\n",
        "    print(f\"Precision: {precision}\")\n",
        "    print(f\"Recall: {recall}\")\n",
        "    print(f\"F1-Score: {f1}\")\n",
        "    print()\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.12"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}